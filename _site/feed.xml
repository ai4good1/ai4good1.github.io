<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-27T10:15:40+05:30</updated><id>http://localhost:4000/</id><title type="html">Gogul Ilango</title><subtitle>This blog on Deep Learning, VLSI Design and STA is written by Gogul Ilango. Master VLSI Design, Physical Design, Static Timing Analysis, Deep Learning through my articles, tutorials and resources.</subtitle><entry><title type="html">Fundamental Laws in Physics</title><link href="http://localhost:4000/science/physics/fundamental-laws-in-physics" rel="alternate" type="text/html" title="Fundamental Laws in Physics" /><published>2019-07-13T00:00:00+05:30</published><updated>2019-07-13T00:00:00+05:30</updated><id>http://localhost:4000/science/physics/fundamental-laws-in-physics</id><content type="html" xml:base="http://localhost:4000/science/physics/fundamental-laws-in-physics">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#amperes-law&quot;&gt;Ampere's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#archimedes-principle&quot;&gt;Archimedes' Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#avogadros-hypothesis&quot;&gt;Avogadro's Hypothesis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#bernoullis-equation&quot;&gt;Bernoulli's Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#biot-savart-law&quot;&gt;Biot-Savart Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#boyles-law-mariottes-law&quot;&gt;Boyle's Law; Mariotte's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#braggs-law&quot;&gt;Bragg's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#brownian-motion&quot;&gt;Brownian Motion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#casimir-effect&quot;&gt;Casimir Effect&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_10&quot; href=&quot;#causality-principle&quot;&gt;Causality Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_11&quot; href=&quot;#centrifugal-pseudoforce&quot;&gt;Centrifugal Pseudoforce&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_12&quot; href=&quot;#charles-law&quot;&gt;Charles' Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_13&quot; href=&quot;#cherenkov-radiation&quot;&gt;Cherenkov Radiation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_14&quot; href=&quot;#complementarity-principle&quot;&gt;Complementarity Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_15&quot; href=&quot;#compton-effect&quot;&gt;Compton Effect&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_16&quot; href=&quot;#conservation-of-mass-energy&quot;&gt;Conservation of mass-energy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_17&quot; href=&quot;#conservation-of-electric-charge&quot;&gt;Conservation of electric charge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_18&quot; href=&quot;#conservation-of-linear-momentum&quot;&gt;Conservation of linear momentum&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_19&quot; href=&quot;#conservation-of-angular-momentum&quot;&gt;Conservation of angular momentum&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_20&quot; href=&quot;#constancy-principle&quot;&gt;Constancy Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_21&quot; href=&quot;#continuity-equation&quot;&gt;Continuity Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_22&quot; href=&quot;#copernican-principle&quot;&gt;Copernican Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_23&quot; href=&quot;#coriolis-pseudoforce&quot;&gt;Coriolis Pseudoforce&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_24&quot; href=&quot;#correspondence-principle&quot;&gt;Correspondence Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_25&quot; href=&quot;#coulombs-law&quot;&gt;Coulomb's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_26&quot; href=&quot;#curies-law&quot;&gt;Curie's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_27&quot; href=&quot;#curie-weiss-law&quot;&gt;Curie-Weiss Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_28&quot; href=&quot;#daltons-law-of-partial-pressures&quot;&gt;Dalton's Law of partial pressures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_29&quot; href=&quot;#doppler-effect&quot;&gt;Doppler Effect&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_30&quot; href=&quot;#dulong-petit-law&quot;&gt;Dulong-Petit Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_31&quot; href=&quot;#einstein-field-equation&quot;&gt;Einstein Field Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_32&quot; href=&quot;#einsteins-mass-energy-equation&quot;&gt;Einstein's Mass-Energy Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_33&quot; href=&quot;#equivalence-principle&quot;&gt;Equivalence Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_34&quot; href=&quot;#faradays-law&quot;&gt;Faraday's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_35&quot; href=&quot;#faradays-first-law-of-electrolysis&quot;&gt;Faraday's first law of electrolysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_36&quot; href=&quot;#faradays-second-law-of-electrolysis&quot;&gt;Faraday's second law of electrolysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_37&quot; href=&quot;#faradays-first-law-of-electromagnetic-induction&quot;&gt;Faraday's first law of electromagnetic induction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_38&quot; href=&quot;#faradays-second-law-of-electromagnetic-induction&quot;&gt;Faraday's second law of electromagnetic induction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_39&quot; href=&quot;#faradays-third-law-of-electromagnetic-induction&quot;&gt;Faraday's third law of electromagnetic induction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_40&quot; href=&quot;#fermats-principle&quot;&gt;Fermat's Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_41&quot; href=&quot;#gauss-law&quot;&gt;Gauss Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_42&quot; href=&quot;#gauss-law-for-magnetic-fields&quot;&gt;Gauss Law for magnetic fields&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_43&quot; href=&quot;#hall-effect&quot;&gt;Hall Effect&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_44&quot; href=&quot;#hookes-law&quot;&gt;Hooke's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_45&quot; href=&quot;#huygens-principle&quot;&gt;Huygens Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_46&quot; href=&quot;#ideal-gas-law&quot;&gt;Ideal Gas Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_47&quot; href=&quot;#joule-thomson-effect-joule-kelvin-effect&quot;&gt;Joule-Thomson Effect; Joule-Kelvin Effect&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_48&quot; href=&quot;#joules-first-law&quot;&gt;Joule's first law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_49&quot; href=&quot;#keplers-first-law&quot;&gt;Kepler's First Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_50&quot; href=&quot;#keplers-second-law&quot;&gt;Kepler's Second Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_51&quot; href=&quot;#keplers-third-law&quot;&gt;Kepler's Third Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_52&quot; href=&quot;#kirchhoffs-loop-rule&quot;&gt;Kirchhoff's Loop Rule&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_53&quot; href=&quot;#kirchhoffs-point-rule&quot;&gt;Kirchhoff's Point Rule&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_54&quot; href=&quot;#kohlrauschs-law&quot;&gt;Kohlrausch's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_55&quot; href=&quot;#lamberts-first-law&quot;&gt;Lambert's first law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_56&quot; href=&quot;#lamberts-second-law&quot;&gt;Lambert's second law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_57&quot; href=&quot;#laplace-equation&quot;&gt;Laplace Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_58&quot; href=&quot;#lenzs-law&quot;&gt;Lenz's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_59&quot; href=&quot;#mach-number&quot;&gt;Mach Number&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_60&quot; href=&quot;#machs-principle&quot;&gt;Mach's Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_61&quot; href=&quot;#gauss-law&quot;&gt;Gauss law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_62&quot; href=&quot;#gauss-law-for-magnetic-fields&quot;&gt;Gauss Law for magnetic fields&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_63&quot; href=&quot;#faradays-law&quot;&gt;Faraday's law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_64&quot; href=&quot;#amperes-law-modified-form&quot;&gt;Ampere's law, modified form&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_65&quot; href=&quot;#murphys-law&quot;&gt;Murphy's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_66&quot; href=&quot;#newtons-law-of-universal-gravitation&quot;&gt;Newton's Law of universal gravitation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_67&quot; href=&quot;#newtons-first-law-of-motion&quot;&gt;Newton's first law of motion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_68&quot; href=&quot;#newtons-second-law-of-motion&quot;&gt;Newton's second law of motion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_69&quot; href=&quot;#newtons-third-law-of-motion&quot;&gt;Newton's third law of motion&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_70&quot; href=&quot;#occams-razor&quot;&gt;Occam's  Razor&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_71&quot; href=&quot;#ohms-law&quot;&gt;Ohm's Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_72&quot; href=&quot;#pascals-principle&quot;&gt;Pascal's Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_73&quot; href=&quot;#peter-principle&quot;&gt;Peter Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_74&quot; href=&quot;#planck-equation&quot;&gt;Planck Equation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_75&quot; href=&quot;#refraction-law&quot;&gt;Refraction Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_76&quot; href=&quot;#relativity-principle&quot;&gt;Relativity Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_77&quot; href=&quot;#stefan-boltzmann-law&quot;&gt;Stefan-Boltzmann Law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_78&quot; href=&quot;#superposition-principle&quot;&gt;Superposition Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_79&quot; href=&quot;#first-law-of-thermodynamics&quot;&gt;First law of thermodynamics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_80&quot; href=&quot;#second-law-of-thermodynamics&quot;&gt;Second law of thermodynamics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_81&quot; href=&quot;#third-law-of-thermodynamics&quot;&gt;Third law of thermodynamics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_82&quot; href=&quot;#zeroth-law-of-thermodynamics&quot;&gt;Zeroth law of thermodynamics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_83&quot; href=&quot;#uncertainty-principle&quot;&gt;Uncertainty Principle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_84&quot; href=&quot;#van-der-waals-force&quot;&gt;van der Waals force&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_85&quot; href=&quot;#wave-particle-duality&quot;&gt;Wave-Particle Duality&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_86&quot; href=&quot;#wiedemann-franz-law&quot;&gt;Wiedemann-Franz Law&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;As I love physics, here is a single page reference for all those beautiful laws using which we could explore the universe around us. Kindly check out &lt;a href=&quot;https://en.wikipedia.org/wiki/Outline_of_physics&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; before reading here.&lt;/p&gt;

&lt;h4 id=&quot;amperes-law&quot;&gt;Ampere’s Law&lt;/h4&gt;

&lt;p&gt;The line integral of the magnetic flux around a closed curve is proportional to the algebraic sum of electric currents flowing through that closed curve; or, in differential form curl \(B = J\). This was later modified to add a second term when it was incorporated into Maxwell’s equations.&lt;/p&gt;

&lt;h4 id=&quot;archimedes-principle&quot;&gt;Archimedes’ Principle&lt;/h4&gt;

&lt;p&gt;A body that is submerged in a fluid is buoyed up by a force equal in magnitude to the weight of the fluid that is displaced, and directed upward along a line through the center of gravity of the displaced fluid.&lt;/p&gt;

&lt;h4 id=&quot;avogadros-hypothesis&quot;&gt;Avogadro’s Hypothesis&lt;/h4&gt;

&lt;p&gt;Equal volumes of all gases at the same temperature and pressure contain equal numbers of molecules. It is, in fact, only true for ideal gases.&lt;/p&gt;

&lt;h4 id=&quot;bernoullis-equation&quot;&gt;Bernoulli’s Equation&lt;/h4&gt;

&lt;p&gt;In an irrotational fluid, the sum of the static pressure, the weight of the fluid per unit mass times the height, and half the density times the velocity squared is constant throughout the fluid.&lt;/p&gt;

&lt;h4 id=&quot;biot-savart-law&quot;&gt;Biot-Savart Law&lt;/h4&gt;

&lt;p&gt;A law which describes the contributions to a magnetic field by an electric current. It is analogous to Coulomb’s law.&lt;/p&gt;

&lt;h4 id=&quot;boyles-law-mariottes-law&quot;&gt;Boyle’s Law; Mariotte’s Law&lt;/h4&gt;

&lt;p&gt;The produce of the pressure and the volume of an ideal gas at constant temperature is constant.&lt;/p&gt;

&lt;h4 id=&quot;braggs-law&quot;&gt;Bragg’s Law&lt;/h4&gt;

&lt;p&gt;When a beam of X-rays strikes a crystal surface in which the layers of atoms or ions are regularly separated, the maximum intensity of the reflected ray occurs when the complement of the angle of incidence \(\theta\), the wavelength of the X-rays \(\lambda\), and the distance between layers of atoms or ions \(d\), are related by the equation \(2 d sin(\theta) = n \lambda\).&lt;/p&gt;

&lt;h4 id=&quot;brownian-motion&quot;&gt;Brownian Motion&lt;/h4&gt;

&lt;p&gt;The continuous random motion of solid microscopic particles when suspended in a fluid medium due to the consequence of ongoing bombardment by atoms and molecules.&lt;/p&gt;

&lt;h4 id=&quot;casimir-effect&quot;&gt;Casimir Effect&lt;/h4&gt;

&lt;p&gt;A quantum mechanical effect, where two very large plates placed close to each other will experience an attractive force, in the absense of other two forces. The cause is virtual particle-antiparticle pair creation in the vicinity of the plates. Also, the speed of light will be increased in the region between the two plates, in the direction perpendicular to them.&lt;/p&gt;

&lt;h4 id=&quot;causality-principle&quot;&gt;Causality Principle&lt;/h4&gt;

&lt;p&gt;The principle that cause must always precede effect. More formally, if an event A (the cause) somehow influences an event B (the effect) which occurs later in time, then event B cannot in turn have an influence on event A. That is, event B must occur at later time than event A, and further, all frames must agree upon this ordering.&lt;/p&gt;

&lt;h4 id=&quot;centrifugal-pseudoforce&quot;&gt;Centrifugal Pseudoforce&lt;/h4&gt;

&lt;p&gt;A pseudoforce on an object when it is moving in uniform circular motion. The force is directed outward from the center of motion.&lt;/p&gt;

&lt;h4 id=&quot;charles-law&quot;&gt;Charles’ Law&lt;/h4&gt;

&lt;p&gt;The volume of an ideal gas at constant pressure is proportional to the thermodynamic temperature of that gas.&lt;/p&gt;

&lt;h4 id=&quot;cherenkov-radiation&quot;&gt;Cherenkov Radiation&lt;/h4&gt;

&lt;p&gt;Radiation emitted by a massive particle which is moving faster than light in the medium through which it is traveling. No particle can travel faster than light in vacuum, but the speed of light in other media, such as water, glass, etc. are considerably slower. Cherenkov radiation is the electromagnetic analogue of the sonic boom, through Cherenkov radiation is a shockwave set up in the electromagnetic field.&lt;/p&gt;

&lt;h4 id=&quot;complementarity-principle&quot;&gt;Complementarity Principle&lt;/h4&gt;

&lt;p&gt;The principle that a given system cannot exhibit both wave-like behavior and particle-like behavior at the same time. That is, certain experiments will reveal the wave-like nature of a system, and certain experiments will reveal the particle-like nature of a system, but no experiment will reveal both simultaneously.&lt;/p&gt;

&lt;h4 id=&quot;compton-effect&quot;&gt;Compton Effect&lt;/h4&gt;

&lt;p&gt;An effect that demonstrates that photons (the quantum of electromagnetic radiation) have momentum. A photon fired at a stationary particle, such as an electron, will impart momentum to the electron and, since its energy has been decreased, will experience a corresponding decrease in frequency.&lt;/p&gt;

&lt;h4 id=&quot;conservation-of-mass-energy&quot;&gt;Conservation of mass-energy&lt;/h4&gt;

&lt;p&gt;The total mass-energy of a closed system remains constant.&lt;/p&gt;

&lt;h4 id=&quot;conservation-of-electric-charge&quot;&gt;Conservation of electric charge&lt;/h4&gt;

&lt;p&gt;The total electric charge of a closed system remains constant&lt;/p&gt;

&lt;h4 id=&quot;conservation-of-linear-momentum&quot;&gt;Conservation of linear momentum&lt;/h4&gt;

&lt;p&gt;The total linear momentum of a closed system remains constant&lt;/p&gt;

&lt;h4 id=&quot;conservation-of-angular-momentum&quot;&gt;Conservation of angular momentum&lt;/h4&gt;

&lt;p&gt;The total angular momentum of a closed system remains constant&lt;/p&gt;

&lt;h4 id=&quot;constancy-principle&quot;&gt;Constancy Principle&lt;/h4&gt;

&lt;p&gt;One of the postulates of A. Einstein’s special theory of relativity, which puts forth that the speed of light in vacuum is measured as the same speed to all observers, regardless of their relative motion.&lt;/p&gt;

&lt;h4 id=&quot;continuity-equation&quot;&gt;Continuity Equation&lt;/h4&gt;

&lt;p&gt;An equation which states that a fluid flowing through pipe flows at a rate which is inversely proportional to the cross-sectional area of the pipe. It is in essence a restatement of the conservation of mass during constant flow.&lt;/p&gt;

&lt;h4 id=&quot;copernican-principle&quot;&gt;Copernican Principle&lt;/h4&gt;

&lt;p&gt;The idea, suggested by Copernicus, that the Sun, not the Earth, is at the center of the Universe. We now know that neither idea is correct.&lt;/p&gt;

&lt;h4 id=&quot;coriolis-pseudoforce&quot;&gt;Coriolis Pseudoforce&lt;/h4&gt;

&lt;p&gt;A pseudoforce which arises because of motion relative to a frame of reference which is itself rotating relative to a second, inertial frame. The magnitude of the Coriolis “force” is dependent on the speed of the object relative to the noninertial frame, and the direction of the “force” is orthogonal to the object’s velocity.&lt;/p&gt;

&lt;h4 id=&quot;correspondence-principle&quot;&gt;Correspondence Principle&lt;/h4&gt;

&lt;p&gt;The principle that when a new, more general theory is put forth, it must reduce to the more specialized (and usually simpler) theory under normal circumstances. There are correspondence principles for general relativity to special relativity and special relativity to Newtonian mechanics, but the most widely known correspondence principle is that of quantum mechanics to classical mechanics.&lt;/p&gt;

&lt;h4 id=&quot;coulombs-law&quot;&gt;Coulomb’s Law&lt;/h4&gt;

&lt;p&gt;The primary law for electrostatics, analogous to Newton’s law of universal gravitation. It states that the force between two point charges is proportional to the algebraic product of their respective charges as well as proportional to the inverse square of the distance between them.&lt;/p&gt;

&lt;h4 id=&quot;curies-law&quot;&gt;Curie’s Law&lt;/h4&gt;

&lt;p&gt;The susceptibility of an isotropic paramagnetic substance \(\chi\) is related to its thermodynamic temperature \(T\) by the equation \(\chi = \frac{C}{T}\) where \(C\) is a material-specific Curie constant.&lt;/p&gt;

&lt;h4 id=&quot;curie-weiss-law&quot;&gt;Curie-Weiss Law&lt;/h4&gt;

&lt;p&gt;A more general form of Curie’s Law, which states that the susceptibility of a paramagnetic substance \(\chi\) is related to its thermodynamic temperature \(T\) by the equation \(\chi = \frac{C}{T - T_c}\) where \(C\) is a material-specific Curie constant, \(T\) is absolute temperature and \(T_c\) is the Curie temperature, both measured in kelvin.&lt;/p&gt;

&lt;h4 id=&quot;daltons-law-of-partial-pressures&quot;&gt;Dalton’s Law of partial pressures&lt;/h4&gt;

&lt;p&gt;The total pressure of a mixture of ideal gases is equal to the sum of the partial pressures of its components; that is, the sum of the pressures that each component would exert if it were present alone and occupied the same volume as the mixture.&lt;/p&gt;

&lt;h4 id=&quot;doppler-effect&quot;&gt;Doppler Effect&lt;/h4&gt;

&lt;p&gt;Waves emitted by a moving object as received by an observer will be blueshifted (compressed) if approaching, redshifted (elongated) if receding. It occurs both in sound as well as electromagnetic phenomena.&lt;/p&gt;

&lt;h4 id=&quot;dulong-petit-law&quot;&gt;Dulong-Petit Law&lt;/h4&gt;

&lt;p&gt;The molar heat capacity is approximately equal to the three times the ideal gas constant.&lt;/p&gt;

&lt;h4 id=&quot;einstein-field-equation&quot;&gt;Einstein Field Equation&lt;/h4&gt;

&lt;p&gt;The cornerstone of Einstein’s general theory of relativity, relating the gravitational tensor \(G\) to the 
stress-energy tensor \(T\) by the simple equation \(G = 8 \pi T\).&lt;/p&gt;

&lt;h4 id=&quot;einsteins-mass-energy-equation&quot;&gt;Einstein’s Mass-Energy Equation&lt;/h4&gt;

&lt;p&gt;The energy \(E\) of a particle is equal to its mass \(M\) times the square of the speed of light \(c\), giving rise to the best known physics equation in the Universe: \( E = M c^2\)&lt;/p&gt;

&lt;h4 id=&quot;equivalence-principle&quot;&gt;Equivalence Principle&lt;/h4&gt;

&lt;p&gt;The basic postulate of A. Einstein’s general theory of relativity, which posits that an acceleration is fundamentally indistinguishable from a gravitational field.&lt;/p&gt;

&lt;h4 id=&quot;faradays-law&quot;&gt;Faraday’s Law&lt;/h4&gt;

&lt;p&gt;The line integral of the electric field around a closed curve is proportional to the instantaneous time rate of change of the magnetic flux through a surface bounded by that closed curve; in differential form curl \(E = -\frac{dB}{dt}\), where \(\frac{d}{dt}\) represents partial differentiation.&lt;/p&gt;

&lt;h4 id=&quot;faradays-first-law-of-electrolysis&quot;&gt;Faraday’s first law of electrolysis&lt;/h4&gt;

&lt;p&gt;The amount of chemical change during electrolysis is proportional to the charge passed.&lt;/p&gt;

&lt;h4 id=&quot;faradays-second-law-of-electrolysis&quot;&gt;Faraday’s second law of electrolysis&lt;/h4&gt;

&lt;p&gt;The charge \(Q\) required to deposit or liberate a mass \(m\) is proportional to the charge \(z\) of the ion, the mass, and inversely proportional to the relative ionic mass \(M\); mathematically \(Q = \frac{F m z}{M}\)&lt;/p&gt;

&lt;h4 id=&quot;faradays-first-law-of-electromagnetic-induction&quot;&gt;Faraday’s first law of electromagnetic induction&lt;/h4&gt;

&lt;p&gt;An electromotive force is induced in a conductor when the magnetic field surrounding it changes.&lt;/p&gt;

&lt;h4 id=&quot;faradays-second-law-of-electromagnetic-induction&quot;&gt;Faraday’s second law of electromagnetic induction&lt;/h4&gt;

&lt;p&gt;The magnitude of the electromotive force is proportional to the rate of change of the field.&lt;/p&gt;

&lt;h4 id=&quot;faradays-third-law-of-electromagnetic-induction&quot;&gt;Faraday’s third law of electromagnetic induction&lt;/h4&gt;

&lt;p&gt;The sense of the induced electromotive force depends on the direction of the rate of the change of the field.&lt;/p&gt;

&lt;h4 id=&quot;fermats-principle&quot;&gt;Fermat’s Principle&lt;/h4&gt;

&lt;p&gt;The principle states that the path taken by a ray of light between any two points in a system is always the path that takes the least time.&lt;/p&gt;

&lt;h4 id=&quot;gauss-law&quot;&gt;Gauss Law&lt;/h4&gt;

&lt;p&gt;The electric flux through a closed surface is proportional to the algebraic sum of electric charges contained within that closed surface; in differential form \(\nabla . E = \frac{\rho}{\epsilon_0}\), where \(\rho\) is the charge density.&lt;/p&gt;

&lt;h4 id=&quot;gauss-law-for-magnetic-fields&quot;&gt;Gauss Law for magnetic fields&lt;/h4&gt;

&lt;p&gt;The magnetic flux through a closed surface is zero; no magnetic charges exist. In differential form \(\nabla . B = 0\).&lt;/p&gt;

&lt;h4 id=&quot;hall-effect&quot;&gt;Hall Effect&lt;/h4&gt;

&lt;p&gt;When charged particles flow through a tube which has both an electric field and a magnetic field (perpendicular to the electric field) present in it, only certain velocities of the charged particles are preferred, and will make it un-deviated through the tube; the rest will be deflected into the sides.&lt;/p&gt;

&lt;h4 id=&quot;hookes-law&quot;&gt;Hooke’s Law&lt;/h4&gt;

&lt;p&gt;The stress applied to any solid is proportional to the strain it produces within the elastic limit for that solid. The constant of that proportionality is the Young modulus of elasticity for that substance.&lt;/p&gt;

&lt;h4 id=&quot;huygens-principle&quot;&gt;Huygens’ Principle&lt;/h4&gt;

&lt;p&gt;The mechanical propagation of a wave (specifically, of light) is equivalent to assuming that every point on the wavefront acts as point source of wave emission&lt;/p&gt;

&lt;h4 id=&quot;ideal-gas-law&quot;&gt;Ideal Gas Law&lt;/h4&gt;

&lt;p&gt;An equation which sums up the ideal gas laws in one simple equation \(P V = n R T\)&lt;/p&gt;

&lt;h4 id=&quot;joule-thomson-effect-joule-kelvin-effect&quot;&gt;Joule-Thomson Effect; Joule-Kelvin Effect&lt;/h4&gt;

&lt;p&gt;The change in temperature that occurs when a gas expands into a region of lower pressure.&lt;/p&gt;

&lt;h4 id=&quot;joules-first-law&quot;&gt;Joule’s first law&lt;/h4&gt;

&lt;p&gt;The heat \(Q\) produced when a current \(I\) flows through a resistance \(R\) for a specified time \(t\) is given by \(Q = I^2 R t\).&lt;/p&gt;

&lt;h4 id=&quot;keplers-first-law&quot;&gt;Kepler’s First Law&lt;/h4&gt;

&lt;p&gt;The orbit of a planet is an ellipse with the Sun at one of the two foci.&lt;/p&gt;

&lt;h4 id=&quot;keplers-second-law&quot;&gt;Kepler’s Second Law&lt;/h4&gt;

&lt;p&gt;A line segment joining a planet and the Sun sweeps out equal areas during equal intervals of time.&lt;/p&gt;

&lt;h4 id=&quot;keplers-third-law&quot;&gt;Kepler’s Third Law&lt;/h4&gt;

&lt;p&gt;The square of the orbital period of a planet is directly proportional to the cube of the semi-major axis of its orbit.&lt;/p&gt;

&lt;h4 id=&quot;kirchhoffs-loop-rule&quot;&gt;Kirchhoff’s Loop Rule&lt;/h4&gt;

&lt;p&gt;The sum of the potential differences encountered in a round trip around any closed loop in a circuit is zero.&lt;/p&gt;

&lt;h4 id=&quot;kirchhoffs-point-rule&quot;&gt;Kirchhoff’s Point Rule&lt;/h4&gt;

&lt;p&gt;The sum of the currents toward a branch point is equal to the sum of the currents away from the same branch point.&lt;/p&gt;

&lt;h4 id=&quot;kohlrauschs-law&quot;&gt;Kohlrausch’s Law&lt;/h4&gt;

&lt;p&gt;If a salt is dissolved in water, the conductivity of the solution is the sum of two values – one depending on the positive ions and the other on the negative ions&lt;/p&gt;

&lt;h4 id=&quot;lamberts-first-law&quot;&gt;Lambert’s first law&lt;/h4&gt;

&lt;p&gt;The illuminance on a surface illuminated by light falling on it perpendicularly from a point source is proportional to the inverse square of the distance between the surface and the source.&lt;/p&gt;

&lt;h4 id=&quot;lamberts-second-law&quot;&gt;Lambert’s second law&lt;/h4&gt;

&lt;p&gt;If the rays meet the surface at an angle, then the illuminance is proportional to the cosine of the angle with the normal.
Lambert’s third law
The luminous intensity of light decreases exponentially with distance as it travels through an absorbing medium.&lt;/p&gt;

&lt;h4 id=&quot;laplace-equation&quot;&gt;Laplace Equation&lt;/h4&gt;

&lt;p&gt;For steady-state heat conduction in one dimension, the temperature distribution is the solution to Laplace’s equation, which states that the second derivative of temperature with respect to displacement is zero.&lt;/p&gt;

&lt;h4 id=&quot;lenzs-law&quot;&gt;Lenz’s Law&lt;/h4&gt;

&lt;p&gt;An induced electric current always flows in such a direction that it opposes the change producing it.&lt;/p&gt;

&lt;h4 id=&quot;mach-number&quot;&gt;Mach Number&lt;/h4&gt;

&lt;p&gt;The ratio of the speed of an object in a given medium to the speed of sound in that medium.&lt;/p&gt;

&lt;h4 id=&quot;machs-principle&quot;&gt;Mach’s Principle&lt;/h4&gt;

&lt;p&gt;The inertia of any particular particle or particles of matter is attributable to the interaction between that piece of matter and the rest of the Universe. Thus, a body in isolation would have no inertia.&lt;/p&gt;

&lt;h3 id=&quot;maxwells-equations&quot;&gt;Maxwell’s Equations&lt;/h3&gt;

&lt;h4 id=&quot;gauss-law-1&quot;&gt;Gauss law&lt;/h4&gt;

&lt;p&gt;The electric flux through a closed surface is proportional to the algebraic sum of electric charges contained within that closed surface; in differential form \(\nabla . E = \frac{\rho}{\epsilon_0}\), where \(\rho\) is the charge density.&lt;/p&gt;

&lt;h4 id=&quot;gauss-law-for-magnetic-fields-1&quot;&gt;Gauss law for magnetic fields&lt;/h4&gt;

&lt;p&gt;The magnetic flux through a closed surface is zero; no magnetic charges exist. In differential form \(\nabla . B = 0\).&lt;/p&gt;

&lt;h4 id=&quot;faradays-law-1&quot;&gt;Faraday’s law&lt;/h4&gt;

&lt;p&gt;The line integral of the electric field around a closed curve is proportional to the instantaneous time rate of change of the magnetic flux through a surface bounded by that closed curve; in differential form \(\nabla X E = -\frac{\partial B}{\partial t}\)&lt;/p&gt;

&lt;h4 id=&quot;amperes-law-modified-form&quot;&gt;Ampere’s law, modified form&lt;/h4&gt;

&lt;p&gt;The line integral of the magnetic field around a closed curve is proportional to the sum of two terms: first, the algebraic sum of electric currents flowing through that closed curve; and second, the instantaneous time rate of change of the electric flux through a surface bounded by that closed curve; in differential form \(\nabla X B = \mu_0 ( J + \epsilon_0 \frac{\partial D}{\partial t} )\).
In addition to describing electromagnetism, his equations also predict that waves can propagate through the electromagnetic field, and would always propagate at the the speed of light in vacuum.&lt;/p&gt;

&lt;h4 id=&quot;murphys-law&quot;&gt;Murphy’s Law&lt;/h4&gt;

&lt;p&gt;If anything can go wrong, it will.&lt;/p&gt;

&lt;h4 id=&quot;newtons-law-of-universal-gravitation&quot;&gt;Newton’s Law of universal gravitation&lt;/h4&gt;

&lt;p&gt;Two bodies attract each other with equal and opposite forces; the magnitude of this force is proportional to the product of the two masses and is also proportional to the inverse square of the distance between the centers of mass of the two bodies; \(F = (\frac{G m_1 m_2}{r^2}) e\), where \(m_1\) and \(m_2\) are the masses of the two bodies, \(r\) is the distance between the two, and \(e\) is a unit vector directed from the test mass to the second.&lt;/p&gt;

&lt;h4 id=&quot;newtons-first-law-of-motion&quot;&gt;Newton’s first law of motion&lt;/h4&gt;

&lt;p&gt;A body continues in its state of constant velocity (which may be zero) unless it is acted upon by an external force.&lt;/p&gt;

&lt;h4 id=&quot;newtons-second-law-of-motion&quot;&gt;Newton’s second law of motion&lt;/h4&gt;

&lt;p&gt;For an unbalanced force acting on a body, the acceleration produced is proportional to the force impressed; the constant of proportionality is the inertial mass of the body.&lt;/p&gt;

&lt;h4 id=&quot;newtons-third-law-of-motion&quot;&gt;Newton’s third law of motion&lt;/h4&gt;

&lt;p&gt;In a system where no external forces are present, every action force is always opposed by an equal and opposite reaction force.&lt;/p&gt;

&lt;h4 id=&quot;occams--razor&quot;&gt;Occam’s  Razor&lt;/h4&gt;

&lt;p&gt;If two theories predict phenomena to the same accuracy, then the one which is simpler is the better one. Moreover, additional aspects of a theory which do not lend it more powerful predicting ability are unnecessary and should be stripped away.&lt;/p&gt;

&lt;h4 id=&quot;ohms-law&quot;&gt;Ohm’s Law&lt;/h4&gt;

&lt;p&gt;The ratio of the potential difference between the ends of a conductor to the current flowing through it is constant; the constant of proportionality is called the resistance, and is different for different materials.&lt;/p&gt;

&lt;h4 id=&quot;pascals-principle&quot;&gt;Pascal’s Principle&lt;/h4&gt;

&lt;p&gt;Pressure applied to an enclosed incompressible static fluid is transmitted undiminished to all parts of the fluid.&lt;/p&gt;

&lt;h4 id=&quot;peter-principle&quot;&gt;Peter Principle&lt;/h4&gt;

&lt;p&gt;In a hierarchy, every employee tends to rise to his level of incompetence.&lt;/p&gt;

&lt;h4 id=&quot;planck-equation&quot;&gt;Planck Equation&lt;/h4&gt;

&lt;p&gt;The quantum mechanical equation relating the energy of a photon \(E\) to its frequency \(f\): \(E = h f\).&lt;/p&gt;

&lt;h4 id=&quot;reflection-law-snells-law&quot;&gt;Reflection Law, Snell’s Law&lt;/h4&gt;

&lt;p&gt;For a wavefront intersecting a reflecting surface, the angle of incidence is equal to the angle of reflection, in the same plane defined by the ray of incidence and the normal.&lt;/p&gt;

&lt;h4 id=&quot;refraction-law&quot;&gt;Refraction Law&lt;/h4&gt;

&lt;p&gt;For a wavefront traveling through a boundary between two media, the first with a refractive index of \(n1\), and the other with one of \(n2\), the angle of incidence \(\theta_1\) is related to the angle of refraction \(\theta_2\) by \(n1 sin(\theta_1) = n2 sin(\theta_2) \).&lt;/p&gt;

&lt;h4 id=&quot;relativity-principle&quot;&gt;Relativity Principle&lt;/h4&gt;

&lt;p&gt;The principle, employed by Einstein’s relativity theories, that the laws of physics are the same, at least qualitatively, in all frames. That is, there is no frame that is better (or qualitatively any different) from any other. This principle, along with the constancy principle, constitute the founding principles of special relativity.&lt;/p&gt;

&lt;h4 id=&quot;stefan-boltzmann-law&quot;&gt;Stefan-Boltzmann Law&lt;/h4&gt;

&lt;p&gt;The radiated power \(P\) (rate of emission of electromagnetic energy) of a hot body is proportional to the radiating surface area \(A\), and the fourth power of the thermodynamic temperature \(T\). The constant of proportionality is the Stefan-Boltzmann constant. Mathematically \(P = A \epsilon \sigma T^4\), where the efficiency rating \(\epsilon\) is called the emissivity of the object.&lt;/p&gt;

&lt;h4 id=&quot;superposition-principle&quot;&gt;Superposition Principle&lt;/h4&gt;

&lt;p&gt;The general idea that, when a number of influences are acting on a system, the total influence on that system is merely the sum of the individual influences; that is, influences governed by the superposition principle add linearly.&lt;/p&gt;

&lt;h4 id=&quot;first-law-of-thermodynamics&quot;&gt;First law of thermodynamics&lt;/h4&gt;

&lt;p&gt;The change in internal energy of a system is the sum of the heat transferred to or from the system and the work done on or by the system.&lt;/p&gt;

&lt;h4 id=&quot;second-law-of-thermodynamics&quot;&gt;Second law of thermodynamics&lt;/h4&gt;

&lt;p&gt;The entropy – a measure of the unavailability of a system’s energy to do useful work – of a closed system tends to increase with time.&lt;/p&gt;

&lt;h4 id=&quot;third-law-of-thermodynamics&quot;&gt;Third law of thermodynamics&lt;/h4&gt;

&lt;p&gt;For changes involving only perfect crystalline solids at absolute zero, the change of the total entropy is zero.&lt;/p&gt;

&lt;h4 id=&quot;zeroth-law-of-thermodynamics&quot;&gt;Zeroth law of thermodynamics&lt;/h4&gt;

&lt;p&gt;If two bodies are each in thermal equilibrium with a third body, then all three bodies are in thermal equilibrium with each other.&lt;/p&gt;

&lt;h4 id=&quot;uncertainty-principle&quot;&gt;Uncertainty Principle&lt;/h4&gt;

&lt;p&gt;A principle, central to quantum mechanics, which states that two complementary parameters (such as position and momentum, energy and time, or angular momentum and angular displacement) cannot both be known to infinite accuracy; the more you know about one, the less you know about the other.&lt;/p&gt;

&lt;h4 id=&quot;van-der-waals-force&quot;&gt;van der Waals force&lt;/h4&gt;

&lt;p&gt;Forces responsible for the non-ideal behavior of gases, and for the lattice energy of molecular crystals. There are three causes: dipole-dipole interaction; dipole-induced dipole moments; and dispersion forces arising because of small instantaneous dipoles in atoms.&lt;/p&gt;

&lt;h4 id=&quot;wave-particle-duality&quot;&gt;Wave-Particle Duality&lt;/h4&gt;

&lt;p&gt;The principle of quantum mechanics which implies that light (and, indeed, all other subatomic particles) sometimes act like a wave, and sometime act like a particle, depending on the experiment you are performing. For instance, low frequency electromagnetic radiation tends to act more like a wave than a particle; high frequency electromagnetic radiation tends to act more like a particle than a wave.&lt;/p&gt;

&lt;h4 id=&quot;wiedemann-franz-law&quot;&gt;Wiedemann-Franz Law&lt;/h4&gt;

&lt;p&gt;The ratio of the thermal conductivity of any pure metal to its electrical conductivity is approximately constant for any given temperature. This law holds fairly well except at low temperatures.&lt;/p&gt;</content><author><name>Gogul Ilango</name></author><category term="science" /><summary type="html">X Contents Ampere's Law Archimedes' Principle Avogadro's Hypothesis Bernoulli's Equation Biot-Savart Law Boyle's Law; Mariotte's Law Bragg's Law Brownian Motion Casimir Effect Causality Principle Centrifugal Pseudoforce Charles' Law Cherenkov Radiation Complementarity Principle Compton Effect Conservation of mass-energy Conservation of electric charge Conservation of linear momentum Conservation of angular momentum Constancy Principle Continuity Equation Copernican Principle Coriolis Pseudoforce Correspondence Principle Coulomb's Law Curie's Law Curie-Weiss Law Dalton's Law of partial pressures Doppler Effect Dulong-Petit Law Einstein Field Equation Einstein's Mass-Energy Equation Equivalence Principle Faraday's Law Faraday's first law of electrolysis Faraday's second law of electrolysis Faraday's first law of electromagnetic induction Faraday's second law of electromagnetic induction Faraday's third law of electromagnetic induction Fermat's Principle Gauss Law Gauss Law for magnetic fields Hall Effect Hooke's Law Huygens Principle Ideal Gas Law Joule-Thomson Effect; Joule-Kelvin Effect Joule's first law Kepler's First Law Kepler's Second Law Kepler's Third Law Kirchhoff's Loop Rule Kirchhoff's Point Rule Kohlrausch's Law Lambert's first law Lambert's second law Laplace Equation Lenz's Law Mach Number Mach's Principle Gauss law Gauss Law for magnetic fields Faraday's law Ampere's law, modified form Murphy's Law Newton's Law of universal gravitation Newton's first law of motion Newton's second law of motion Newton's third law of motion Occam's Razor Ohm's Law Pascal's Principle Peter Principle Planck Equation Refraction Law Relativity Principle Stefan-Boltzmann Law Superposition Principle First law of thermodynamics Second law of thermodynamics Third law of thermodynamics Zeroth law of thermodynamics Uncertainty Principle van der Waals force Wave-Particle Duality Wiedemann-Franz Law As I love physics, here is a single page reference for all those beautiful laws using which we could explore the universe around us. Kindly check out this before reading here. Ampere’s Law The line integral of the magnetic flux around a closed curve is proportional to the algebraic sum of electric currents flowing through that closed curve; or, in differential form curl \(B = J\). This was later modified to add a second term when it was incorporated into Maxwell’s equations. Archimedes’ Principle A body that is submerged in a fluid is buoyed up by a force equal in magnitude to the weight of the fluid that is displaced, and directed upward along a line through the center of gravity of the displaced fluid. Avogadro’s Hypothesis Equal volumes of all gases at the same temperature and pressure contain equal numbers of molecules. It is, in fact, only true for ideal gases. Bernoulli’s Equation In an irrotational fluid, the sum of the static pressure, the weight of the fluid per unit mass times the height, and half the density times the velocity squared is constant throughout the fluid. Biot-Savart Law A law which describes the contributions to a magnetic field by an electric current. It is analogous to Coulomb’s law. Boyle’s Law; Mariotte’s Law The produce of the pressure and the volume of an ideal gas at constant temperature is constant. Bragg’s Law When a beam of X-rays strikes a crystal surface in which the layers of atoms or ions are regularly separated, the maximum intensity of the reflected ray occurs when the complement of the angle of incidence \(\theta\), the wavelength of the X-rays \(\lambda\), and the distance between layers of atoms or ions \(d\), are related by the equation \(2 d sin(\theta) = n \lambda\). Brownian Motion The continuous random motion of solid microscopic particles when suspended in a fluid medium due to the consequence of ongoing bombardment by atoms and molecules. Casimir Effect A quantum mechanical effect, where two very large plates placed close to each other will experience an attractive force, in the absense of other two forces. The cause is virtual particle-antiparticle pair creation in the vicinity of the plates. Also, the speed of light will be increased in the region between the two plates, in the direction perpendicular to them. Causality Principle The principle that cause must always precede effect. More formally, if an event A (the cause) somehow influences an event B (the effect) which occurs later in time, then event B cannot in turn have an influence on event A. That is, event B must occur at later time than event A, and further, all frames must agree upon this ordering. Centrifugal Pseudoforce A pseudoforce on an object when it is moving in uniform circular motion. The force is directed outward from the center of motion. Charles’ Law The volume of an ideal gas at constant pressure is proportional to the thermodynamic temperature of that gas. Cherenkov Radiation Radiation emitted by a massive particle which is moving faster than light in the medium through which it is traveling. No particle can travel faster than light in vacuum, but the speed of light in other media, such as water, glass, etc. are considerably slower. Cherenkov radiation is the electromagnetic analogue of the sonic boom, through Cherenkov radiation is a shockwave set up in the electromagnetic field. Complementarity Principle The principle that a given system cannot exhibit both wave-like behavior and particle-like behavior at the same time. That is, certain experiments will reveal the wave-like nature of a system, and certain experiments will reveal the particle-like nature of a system, but no experiment will reveal both simultaneously. Compton Effect An effect that demonstrates that photons (the quantum of electromagnetic radiation) have momentum. A photon fired at a stationary particle, such as an electron, will impart momentum to the electron and, since its energy has been decreased, will experience a corresponding decrease in frequency. Conservation of mass-energy The total mass-energy of a closed system remains constant. Conservation of electric charge The total electric charge of a closed system remains constant Conservation of linear momentum The total linear momentum of a closed system remains constant Conservation of angular momentum The total angular momentum of a closed system remains constant Constancy Principle One of the postulates of A. Einstein’s special theory of relativity, which puts forth that the speed of light in vacuum is measured as the same speed to all observers, regardless of their relative motion. Continuity Equation An equation which states that a fluid flowing through pipe flows at a rate which is inversely proportional to the cross-sectional area of the pipe. It is in essence a restatement of the conservation of mass during constant flow. Copernican Principle The idea, suggested by Copernicus, that the Sun, not the Earth, is at the center of the Universe. We now know that neither idea is correct. Coriolis Pseudoforce A pseudoforce which arises because of motion relative to a frame of reference which is itself rotating relative to a second, inertial frame. The magnitude of the Coriolis “force” is dependent on the speed of the object relative to the noninertial frame, and the direction of the “force” is orthogonal to the object’s velocity. Correspondence Principle The principle that when a new, more general theory is put forth, it must reduce to the more specialized (and usually simpler) theory under normal circumstances. There are correspondence principles for general relativity to special relativity and special relativity to Newtonian mechanics, but the most widely known correspondence principle is that of quantum mechanics to classical mechanics. Coulomb’s Law The primary law for electrostatics, analogous to Newton’s law of universal gravitation. It states that the force between two point charges is proportional to the algebraic product of their respective charges as well as proportional to the inverse square of the distance between them. Curie’s Law The susceptibility of an isotropic paramagnetic substance \(\chi\) is related to its thermodynamic temperature \(T\) by the equation \(\chi = \frac{C}{T}\) where \(C\) is a material-specific Curie constant. Curie-Weiss Law A more general form of Curie’s Law, which states that the susceptibility of a paramagnetic substance \(\chi\) is related to its thermodynamic temperature \(T\) by the equation \(\chi = \frac{C}{T - T_c}\) where \(C\) is a material-specific Curie constant, \(T\) is absolute temperature and \(T_c\) is the Curie temperature, both measured in kelvin. Dalton’s Law of partial pressures The total pressure of a mixture of ideal gases is equal to the sum of the partial pressures of its components; that is, the sum of the pressures that each component would exert if it were present alone and occupied the same volume as the mixture. Doppler Effect Waves emitted by a moving object as received by an observer will be blueshifted (compressed) if approaching, redshifted (elongated) if receding. It occurs both in sound as well as electromagnetic phenomena. Dulong-Petit Law The molar heat capacity is approximately equal to the three times the ideal gas constant. Einstein Field Equation The cornerstone of Einstein’s general theory of relativity, relating the gravitational tensor \(G\) to the stress-energy tensor \(T\) by the simple equation \(G = 8 \pi T\). Einstein’s Mass-Energy Equation The energy \(E\) of a particle is equal to its mass \(M\) times the square of the speed of light \(c\), giving rise to the best known physics equation in the Universe: \( E = M c^2\) Equivalence Principle The basic postulate of A. Einstein’s general theory of relativity, which posits that an acceleration is fundamentally indistinguishable from a gravitational field. Faraday’s Law The line integral of the electric field around a closed curve is proportional to the instantaneous time rate of change of the magnetic flux through a surface bounded by that closed curve; in differential form curl \(E = -\frac{dB}{dt}\), where \(\frac{d}{dt}\) represents partial differentiation. Faraday’s first law of electrolysis The amount of chemical change during electrolysis is proportional to the charge passed. Faraday’s second law of electrolysis The charge \(Q\) required to deposit or liberate a mass \(m\) is proportional to the charge \(z\) of the ion, the mass, and inversely proportional to the relative ionic mass \(M\); mathematically \(Q = \frac{F m z}{M}\) Faraday’s first law of electromagnetic induction An electromotive force is induced in a conductor when the magnetic field surrounding it changes. Faraday’s second law of electromagnetic induction The magnitude of the electromotive force is proportional to the rate of change of the field. Faraday’s third law of electromagnetic induction The sense of the induced electromotive force depends on the direction of the rate of the change of the field. Fermat’s Principle The principle states that the path taken by a ray of light between any two points in a system is always the path that takes the least time. Gauss Law The electric flux through a closed surface is proportional to the algebraic sum of electric charges contained within that closed surface; in differential form \(\nabla . E = \frac{\rho}{\epsilon_0}\), where \(\rho\) is the charge density. Gauss Law for magnetic fields The magnetic flux through a closed surface is zero; no magnetic charges exist. In differential form \(\nabla . B = 0\). Hall Effect When charged particles flow through a tube which has both an electric field and a magnetic field (perpendicular to the electric field) present in it, only certain velocities of the charged particles are preferred, and will make it un-deviated through the tube; the rest will be deflected into the sides. Hooke’s Law The stress applied to any solid is proportional to the strain it produces within the elastic limit for that solid. The constant of that proportionality is the Young modulus of elasticity for that substance. Huygens’ Principle The mechanical propagation of a wave (specifically, of light) is equivalent to assuming that every point on the wavefront acts as point source of wave emission Ideal Gas Law An equation which sums up the ideal gas laws in one simple equation \(P V = n R T\) Joule-Thomson Effect; Joule-Kelvin Effect The change in temperature that occurs when a gas expands into a region of lower pressure. Joule’s first law The heat \(Q\) produced when a current \(I\) flows through a resistance \(R\) for a specified time \(t\) is given by \(Q = I^2 R t\). Kepler’s First Law The orbit of a planet is an ellipse with the Sun at one of the two foci. Kepler’s Second Law A line segment joining a planet and the Sun sweeps out equal areas during equal intervals of time. Kepler’s Third Law The square of the orbital period of a planet is directly proportional to the cube of the semi-major axis of its orbit. Kirchhoff’s Loop Rule The sum of the potential differences encountered in a round trip around any closed loop in a circuit is zero. Kirchhoff’s Point Rule The sum of the currents toward a branch point is equal to the sum of the currents away from the same branch point. Kohlrausch’s Law If a salt is dissolved in water, the conductivity of the solution is the sum of two values – one depending on the positive ions and the other on the negative ions Lambert’s first law The illuminance on a surface illuminated by light falling on it perpendicularly from a point source is proportional to the inverse square of the distance between the surface and the source. Lambert’s second law If the rays meet the surface at an angle, then the illuminance is proportional to the cosine of the angle with the normal. Lambert’s third law The luminous intensity of light decreases exponentially with distance as it travels through an absorbing medium. Laplace Equation For steady-state heat conduction in one dimension, the temperature distribution is the solution to Laplace’s equation, which states that the second derivative of temperature with respect to displacement is zero. Lenz’s Law An induced electric current always flows in such a direction that it opposes the change producing it. Mach Number The ratio of the speed of an object in a given medium to the speed of sound in that medium. Mach’s Principle The inertia of any particular particle or particles of matter is attributable to the interaction between that piece of matter and the rest of the Universe. Thus, a body in isolation would have no inertia. Maxwell’s Equations Gauss law The electric flux through a closed surface is proportional to the algebraic sum of electric charges contained within that closed surface; in differential form \(\nabla . E = \frac{\rho}{\epsilon_0}\), where \(\rho\) is the charge density. Gauss law for magnetic fields The magnetic flux through a closed surface is zero; no magnetic charges exist. In differential form \(\nabla . B = 0\). Faraday’s law The line integral of the electric field around a closed curve is proportional to the instantaneous time rate of change of the magnetic flux through a surface bounded by that closed curve; in differential form \(\nabla X E = -\frac{\partial B}{\partial t}\) Ampere’s law, modified form The line integral of the magnetic field around a closed curve is proportional to the sum of two terms: first, the algebraic sum of electric currents flowing through that closed curve; and second, the instantaneous time rate of change of the electric flux through a surface bounded by that closed curve; in differential form \(\nabla X B = \mu_0 ( J + \epsilon_0 \frac{\partial D}{\partial t} )\). In addition to describing electromagnetism, his equations also predict that waves can propagate through the electromagnetic field, and would always propagate at the the speed of light in vacuum. Murphy’s Law If anything can go wrong, it will. Newton’s Law of universal gravitation Two bodies attract each other with equal and opposite forces; the magnitude of this force is proportional to the product of the two masses and is also proportional to the inverse square of the distance between the centers of mass of the two bodies; \(F = (\frac{G m_1 m_2}{r^2}) e\), where \(m_1\) and \(m_2\) are the masses of the two bodies, \(r\) is the distance between the two, and \(e\) is a unit vector directed from the test mass to the second. Newton’s first law of motion A body continues in its state of constant velocity (which may be zero) unless it is acted upon by an external force. Newton’s second law of motion For an unbalanced force acting on a body, the acceleration produced is proportional to the force impressed; the constant of proportionality is the inertial mass of the body. Newton’s third law of motion In a system where no external forces are present, every action force is always opposed by an equal and opposite reaction force. Occam’s Razor If two theories predict phenomena to the same accuracy, then the one which is simpler is the better one. Moreover, additional aspects of a theory which do not lend it more powerful predicting ability are unnecessary and should be stripped away. Ohm’s Law The ratio of the potential difference between the ends of a conductor to the current flowing through it is constant; the constant of proportionality is called the resistance, and is different for different materials. Pascal’s Principle Pressure applied to an enclosed incompressible static fluid is transmitted undiminished to all parts of the fluid. Peter Principle In a hierarchy, every employee tends to rise to his level of incompetence. Planck Equation The quantum mechanical equation relating the energy of a photon \(E\) to its frequency \(f\): \(E = h f\). Reflection Law, Snell’s Law For a wavefront intersecting a reflecting surface, the angle of incidence is equal to the angle of reflection, in the same plane defined by the ray of incidence and the normal. Refraction Law For a wavefront traveling through a boundary between two media, the first with a refractive index of \(n1\), and the other with one of \(n2\), the angle of incidence \(\theta_1\) is related to the angle of refraction \(\theta_2\) by \(n1 sin(\theta_1) = n2 sin(\theta_2) \). Relativity Principle The principle, employed by Einstein’s relativity theories, that the laws of physics are the same, at least qualitatively, in all frames. That is, there is no frame that is better (or qualitatively any different) from any other. This principle, along with the constancy principle, constitute the founding principles of special relativity. Stefan-Boltzmann Law The radiated power \(P\) (rate of emission of electromagnetic energy) of a hot body is proportional to the radiating surface area \(A\), and the fourth power of the thermodynamic temperature \(T\). The constant of proportionality is the Stefan-Boltzmann constant. Mathematically \(P = A \epsilon \sigma T^4\), where the efficiency rating \(\epsilon\) is called the emissivity of the object. Superposition Principle The general idea that, when a number of influences are acting on a system, the total influence on that system is merely the sum of the individual influences; that is, influences governed by the superposition principle add linearly. First law of thermodynamics The change in internal energy of a system is the sum of the heat transferred to or from the system and the work done on or by the system. Second law of thermodynamics The entropy – a measure of the unavailability of a system’s energy to do useful work – of a closed system tends to increase with time. Third law of thermodynamics For changes involving only perfect crystalline solids at absolute zero, the change of the total entropy is zero. Zeroth law of thermodynamics If two bodies are each in thermal equilibrium with a third body, then all three bodies are in thermal equilibrium with each other. Uncertainty Principle A principle, central to quantum mechanics, which states that two complementary parameters (such as position and momentum, energy and time, or angular momentum and angular displacement) cannot both be known to infinite accuracy; the more you know about one, the less you know about the other. van der Waals force Forces responsible for the non-ideal behavior of gases, and for the lattice energy of molecular crystals. There are three causes: dipole-dipole interaction; dipole-induced dipole moments; and dispersion forces arising because of small instantaneous dipoles in atoms. Wave-Particle Duality The principle of quantum mechanics which implies that light (and, indeed, all other subatomic particles) sometimes act like a wave, and sometime act like a particle, depending on the experiment you are performing. For instance, low frequency electromagnetic radiation tends to act more like a wave than a particle; high frequency electromagnetic radiation tends to act more like a particle than a wave. Wiedemann-Franz Law The ratio of the thermal conductivity of any pure metal to its electrical conductivity is approximately constant for any given temperature. This law holds fairly well except at low temperatures.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1cdKRbfeV4iVrFSybWnru3Q_hqWbWBUIX" /></entry><entry><title type="html">Deep Learning Meets Physics</title><link href="http://localhost:4000/software/deep-learning-meets-physics" rel="alternate" type="text/html" title="Deep Learning Meets Physics" /><published>2019-07-07T00:00:00+05:30</published><updated>2019-07-07T00:00:00+05:30</updated><id>http://localhost:4000/software/deep-learning-meets-physics</id><content type="html" xml:base="http://localhost:4000/software/deep-learning-meets-physics">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#cern&quot;&gt;CERN&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#the-standard-model&quot;&gt;The Standard Model&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#research-papers&quot;&gt;Research Papers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#ml-challenge&quot;&gt;ML Challenge&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#tools-used-for-dl&quot;&gt;Tools used for DL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;I’m always fascinated by the matter around us which make my neurons think what’s inside matter? How matter formed at the first place? Who created or what created matter that exist now in our universe? Why there isn’t much anti-matter as there is matter in this universe? These fundamental questions are still being researched by the greatest human beings of our time across the world.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Space and time are modes by which we think, not conditions under which we live - Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cern&quot;&gt;CERN&lt;/h3&gt;

&lt;p&gt;When you seek answers for fundamental questions like these over the internet, you will find &lt;a href=&quot;https://home.cern/&quot; target=&quot;_blank&quot;&gt;CERN&lt;/a&gt; in many of the links that Google provides. If you love science, then you must know the composition of our universe is found to be 73% dark energy, 23% dark matter, 3.6% intergalactic gas and the rest, visible matter that we see around us.&lt;/p&gt;

&lt;figure&gt;
  &lt;canvas id=&quot;universe-pie-chart&quot;&gt;&lt;/canvas&gt;
  &lt;figcaption&gt;Predicted Composition of our Universe [&lt;a href=&quot;https://en.wikipedia.org/wiki/Universe&quot; target=&quot;_blank&quot;&gt;source&lt;/a&gt;]&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Scientists are CERN are researching about this composition of our universe and still they couldn’t understand what constitutes &lt;a href=&quot;https://en.wikipedia.org/wiki/Dark_matter&quot; target=&quot;_blank&quot;&gt;dark matter&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Dark_energy&quot;&gt;dark energy&lt;/a&gt;. Before we talk about how deep learning fits in here, lets see some swashbuckling facts about CERN.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;International organization straddling Swiss-French border, founded 1954 having world’s largest facilities for fundamental research in particle physics.&lt;/li&gt;
  &lt;li&gt;23 members states - 1.1 B CHF budget (~1.1B USD)&lt;/li&gt;
  &lt;li&gt;3000 members of personnel + 15,000 associated members from 90 countries.&lt;/li&gt;
  &lt;li&gt;Has &lt;a href=&quot;https://en.wikipedia.org/wiki/Large_Hadron_Collider&quot; target=&quot;_blank&quot;&gt;Large Hadron Collider (LHC)&lt;/a&gt; - Largest machine in the world which is 27km long.&lt;/li&gt;
  &lt;li&gt;Fastest racetrack on Earth where protons travel at 99.9999991% of the speed of light.&lt;/li&gt;
  &lt;li&gt;Emptiest place in the solar system where particules circulate in the highest vacuum.&lt;/li&gt;
  &lt;li&gt;Hottest spot in the galaxy where lead ion collisions create temperatures 100,000x hotter than the hearth of the sun.&lt;/li&gt;
  &lt;li&gt;In 1989, Tim Berners-Lee proposed the creation of a distributed information system which is evolved into what we call the World Wide Web.&lt;/li&gt;
  &lt;li&gt;The World’s first &lt;a href=&quot;http://info.cern.ch/&quot; target=&quot;_blank&quot;&gt;web page&lt;/a&gt; was originated from CERN.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;youtube-video-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/h2MlS09KJP4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;There are four major experiments done using the Large Hadron Collider (LHC) at CERN as shown in Figure 2. These are detectors with 100 million sensors that gather information about particles trajectory, electrical charge and energy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ATLAS_experiment&quot; target=&quot;_blank&quot;&gt;ATLAS&lt;/a&gt; - A Toroidal LHC Apparatus&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Compact_Muon_Solenoid&quot; target=&quot;_blank&quot;&gt;CMS&lt;/a&gt; - Compact Muon Solenoid&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ALICE_experiment&quot; target=&quot;_blank&quot;&gt;ALICE&lt;/a&gt; - A Large Ion Collider Experiment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LHCb_experiment&quot; target=&quot;_blank&quot;&gt;LHCb&lt;/a&gt; - LHC-beauty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other three experiments at LHC are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TOTEM_experiment&quot; target=&quot;_blank&quot;&gt;TOTEM&lt;/a&gt; - Total Cross Section, Elastic Scattering and Diffraction Dissociation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/LHCf_experiment&quot; target=&quot;_blank&quot;&gt;LHCf&lt;/a&gt; - LHC-forward&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/MoEDAL_experiment&quot; target=&quot;_blank&quot;&gt;MoEDAL&lt;/a&gt; - Monopole and Exotics Detector At the LHC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kindly visit &lt;a href=&quot;https://home.cern/science/accelerators/large-hadron-collider&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; to know more about LHC.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1CKH6Sm8AMJPBR0nz2HIidI20B6piX8EX&quot; /&gt;
  &lt;figcaption&gt;Figure 2. Experiments at CERN - CMS, ALICE, ATLAS, LHCb&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Ok, why do we need such a big instrumental setup to explore what’s inside an atom? Let’s understand why we need to figure out what’s inside an atom at the first place?&lt;/p&gt;

&lt;p&gt;It’s assumed that everything that we see around us (sun, earth, moon, stars, trees, humans etc.,) began with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Bang&quot; target=&quot;_blank&quot;&gt;Big Bang&lt;/a&gt;. Before learning about the fundamental particles and forces of nature, please read &lt;a href=&quot;https://en.wikipedia.org/wiki/Chronology_of_the_universe&quot; target=&quot;_blank&quot;&gt;Chronology of the Universe&lt;/a&gt; to understand the history, present and future of our universe so that you will come to a conclusion that finding the most fundamental particle (that makes up matter) and how forces of nature interact with that particle is what we need to find out.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1eJG249efsG0_UapFZNUfX9KxKxj8oOZs&quot; /&gt;
  &lt;figcaption&gt;Figure 3. Diagram of evolution of the (observable part) of the universe from the Big Bang (left) to the present &lt;br /&gt; [&lt;a href=&quot;https://en.wikipedia.org/wiki/Chronology_of_the_universe&quot;&gt;source&lt;/a&gt;]&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Above picture tells us, Big Bang happened at a specific point in time which converted energy into matter (made of particles). Using LHC, if we make proton beams to collide with each other near to speed of light, then we can discover what’s inside proton. The study of such sub-atomic particles is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Particle_physics&quot; target=&quot;_blank&quot;&gt;particle physics&lt;/a&gt; which allow humans to seek answers to science’s most fundamental questions.&lt;/p&gt;

&lt;h3 id=&quot;the-standard-model&quot;&gt;The Standard Model&lt;/h3&gt;

&lt;p&gt;Matter that we see around us is found to be made of few basic building blocks united by four fundamental forces in nature. You can read more about the standard model &lt;a href=&quot;https://home.cern/science/physics/standard-model&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=17dGzpVj42v1fYvYXe7HHO2F7e1xYinkh&quot; /&gt;
  &lt;figcaption&gt;Figure 4. Standard Model of Elementary Particles&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It turns out that to find out these sub-atomic particles, LHC experiments generates petabyte of data per second, which means its an ultimate place to use Deep Learning algorithms. For example, an experiment at &lt;a href=&quot;https://en.wikipedia.org/wiki/Compact_Muon_Solenoid&quot; target=&quot;_blank&quot;&gt;CMS&lt;/a&gt; (Compact Muon Solenoid) generates 40 million collisions per second (PB/s) which is filtered in real-time to 100,000 selections per second (TB/s) and 1,000 selections per second (GB/s), selecting potentially interesting events or triggers.&lt;/p&gt;

&lt;div class=&quot;youtube-video-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ehHoOYqAT_U&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The complexity in these experiments is so huge that if you are a data-lover, it seems like a place for you to explore, analyze, visualize and find meaning out of these. Take a look at the data center numbers of CERN shown below.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1SNS96iE_Wjo0hp6tpnfqWEVuyJw4ABiF&quot; /&gt;
  &lt;figcaption&gt;Figure 5. CERN Data Center in Numbers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;research-papers&quot;&gt;Research Papers&lt;/h3&gt;

&lt;p&gt;Some research work that I follow and read are collected below on application of deep learning algorithms for high-energy physics.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1402.4735.pdf&quot; target=&quot;_blank&quot;&gt;Searching for Exotic Particles in High-Energy Physics with Deep Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1806.11484.pdf&quot; target=&quot;_blank&quot;&gt;Deep Learning and Its Application to LHC Physics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1905.01330.pdf&quot; target=&quot;_blank&quot;&gt;TensorNetwork: A Library for Physics and Machine Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1807.00083.pdf&quot; target=&quot;_blank&quot;&gt;Topology classification with deep learning to improve real-time event selection at the LHC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1705.02355.pdf&quot; target=&quot;_blank&quot;&gt;Accelerating Science with Generative Adversarial Networks: An Application to 3D Particle Showers in Multi-Layer Calorimeters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/B-tagging&quot; target=&quot;_blank&quot;&gt;Bi-directional RNNs and CNNs for impact parameter based tagging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-jet-multiclass-classifier&quot;&gt;A jet multiclass classifier&lt;/h4&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Jet_(particle_physics)&quot; target=&quot;_blank&quot;&gt;jet&lt;/a&gt; is a narrow cone of hadrons and other particles produced by the hadronization of a quark or gluon. Simple Deep Neural Nets on high-level features (jet masses, multiplicities, energy correlation functions) etc., can be used to create a jet multiclass classifier.&lt;/p&gt;

&lt;p&gt;It’s very interesting to know Deep Learning algorithms such as Convolutional Neural Network (CNN), Recurrent Neural Network (RNN), Bi-directional RNN, Long-Short Term Memory (LSTM) network, Gated Recurrent Units (GRU) and Generative Adversarial Network (GAN) are used in LHC experiments to analyze and get insights about the nature of our universe.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ml-challenge&quot;&gt;ML Challenge&lt;/h3&gt;

&lt;p&gt;On 4 July 2012, CMS and ATLAS experiments at LHC confirmed the discovery of Higgs Boson. How a particle decays into other particles is the key factor to understand and measure the characteristics of the particle. It’s confirmed that Higgs Boson decays into two tau particles which is a small signal buried in background noise.&lt;/p&gt;

&lt;p&gt;Recently, I became aware of Higgs Boson Machine Learning Challenge conducted by CERN and Kaggle on 2014. Here is the link to the challenge - &lt;a href=&quot;https://home.cern/news/news/computing/higgs-boson-machine-learning-challenge&quot; target=&quot;_blank&quot;&gt;Higgs boson machine-learning challenge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you know machine learning, it’s enough to participate in this competition as the task is to classify ATLAS events as &lt;strong&gt;tau tau decay of a higgs boson&lt;/strong&gt; or &lt;strong&gt;background noise&lt;/strong&gt; using the features characterizing the events.&lt;/p&gt;

&lt;p&gt;For a beginner like me who is interested in applying ML/DL for high-energy physics, I found this as the perfect start!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tools-used-for-dl&quot;&gt;Tools used for DL&lt;/h3&gt;

&lt;p&gt;It’s amazing to hear that python and its ecosystem is used for data analytics in CERN LHC. Similar to how the image of black hole was created using &lt;a href=&quot;http://www.blog.pythonlibrary.org/2019/04/11/python-used-to-take-photo-of-black-hole/&quot; target=&quot;_blank&quot;&gt;Python and its ecosystem&lt;/a&gt;, we could use the same to understand more about our universe.&lt;/p&gt;

&lt;p&gt;Some of the tools used at CERN to do data analytics are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jupyter Notebook&lt;/li&gt;
  &lt;li&gt;Apache Spark&lt;/li&gt;
  &lt;li&gt;Apache Kafka&lt;/li&gt;
  &lt;li&gt;Analytics Zoo&lt;/li&gt;
  &lt;li&gt;BigDL&lt;/li&gt;
  &lt;li&gt;HDFS&lt;/li&gt;
  &lt;li&gt;TensorFlow&lt;/li&gt;
  &lt;li&gt;Keras&lt;/li&gt;
  &lt;li&gt;NumPy&lt;/li&gt;
  &lt;li&gt;SciPy&lt;/li&gt;
  &lt;li&gt;Pandas&lt;/li&gt;
  &lt;li&gt;Matplotlib&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bMU5Luyuk1Q&quot; target=&quot;_blank&quot;&gt;Deep Learning on Apache Spark at CERN’s Large Hadron Collider with Intel Technologies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cerncourier.com/the-rise-of-deep-learning/&quot; target=&quot;_blank&quot;&gt;The Rise of Deep Learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5z0Zp530Tms&quot; target=&quot;_blank&quot;&gt;Reshaping Particle Physics Experiments with Deep Learning - Maurizio Pierini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QAa2O_8wBUQ&quot; target=&quot;_blank&quot;&gt;What is Dark Matter and Dark Energy?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/How-is-CERN-using-deep-learning&quot; target=&quot;_blank&quot;&gt;How is CERN using deep learning?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://science.nasa.gov/astrophysics/focus-areas/what-is-dark-energy&quot; target=&quot;_blank&quot;&gt;Dark Energy, Dark Matter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nationalgeographic.com/science/space/dark-matter/&quot; target=&quot;_blank&quot;&gt;Dark Matter and Dark Energy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iitk.ac.in/snt/blog/2013/07/24/dark-matter.htm&quot; target=&quot;_blank&quot;&gt;Dark-matter made of ‘Dark Atoms’?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://science.howstuffworks.com/science-vs-myth/everyday-myths/what-does-cern-mean-for-future-of-universe.htm&quot; target=&quot;_blank&quot;&gt;What does CERN mean for the future of the universe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cds.cern.ch/record/2621728?ln=en&quot; target=&quot;_blank&quot;&gt;Invited Talk - Deep Learning meets Physics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=328pw5Taeg0&quot; target=&quot;_blank&quot;&gt;How Does the Large Hadron Collider Work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chronology_of_the_universe&quot; target=&quot;_blank&quot;&gt;Chronology of the universe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Bang&quot; target=&quot;_blank&quot;&gt;Big Bang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Time&quot; target=&quot;_blank&quot;&gt;Time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Universe&quot; target=&quot;_blank&quot;&gt;Universe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Jet_(particle_physics)&quot; target=&quot;_blank&quot;&gt;Jet (particle physics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@2.8.0&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var ctx = document.getElementById('universe-pie-chart').getContext('2d');
var uChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
        datasets: [{
            data: [73, 23, 3.6, 0.4],
            backgroundColor: ['#333333', 'rgb(77,65,103)', 'rgb(255,204,0)', 'rgb(240,51,93)'],
        }],

        labels: [
            'Dark Energy',
            'Dark Matter',
            'Intergalactic Gas',
            'Stars, etc.,'
        ]
    }
});
&lt;/script&gt;</content><author><name></name></author><category term="software" /><summary type="html">X Contents CERN The Standard Model Research Papers ML Challenge Tools used for DL References I’m always fascinated by the matter around us which make my neurons think what’s inside matter? How matter formed at the first place? Who created or what created matter that exist now in our universe? Why there isn’t much anti-matter as there is matter in this universe? These fundamental questions are still being researched by the greatest human beings of our time across the world. Space and time are modes by which we think, not conditions under which we live - Albert Einstein CERN When you seek answers for fundamental questions like these over the internet, you will find CERN in many of the links that Google provides. If you love science, then you must know the composition of our universe is found to be 73% dark energy, 23% dark matter, 3.6% intergalactic gas and the rest, visible matter that we see around us. Predicted Composition of our Universe [source] Scientists are CERN are researching about this composition of our universe and still they couldn’t understand what constitutes dark matter or dark energy. Before we talk about how deep learning fits in here, lets see some swashbuckling facts about CERN. International organization straddling Swiss-French border, founded 1954 having world’s largest facilities for fundamental research in particle physics. 23 members states - 1.1 B CHF budget (~1.1B USD) 3000 members of personnel + 15,000 associated members from 90 countries. Has Large Hadron Collider (LHC) - Largest machine in the world which is 27km long. Fastest racetrack on Earth where protons travel at 99.9999991% of the speed of light. Emptiest place in the solar system where particules circulate in the highest vacuum. Hottest spot in the galaxy where lead ion collisions create temperatures 100,000x hotter than the hearth of the sun. In 1989, Tim Berners-Lee proposed the creation of a distributed information system which is evolved into what we call the World Wide Web. The World’s first web page was originated from CERN. There are four major experiments done using the Large Hadron Collider (LHC) at CERN as shown in Figure 2. These are detectors with 100 million sensors that gather information about particles trajectory, electrical charge and energy. ATLAS - A Toroidal LHC Apparatus CMS - Compact Muon Solenoid ALICE - A Large Ion Collider Experiment LHCb - LHC-beauty Other three experiments at LHC are TOTEM - Total Cross Section, Elastic Scattering and Diffraction Dissociation LHCf - LHC-forward MoEDAL - Monopole and Exotics Detector At the LHC Kindly visit this to know more about LHC. Figure 2. Experiments at CERN - CMS, ALICE, ATLAS, LHCb Ok, why do we need such a big instrumental setup to explore what’s inside an atom? Let’s understand why we need to figure out what’s inside an atom at the first place? It’s assumed that everything that we see around us (sun, earth, moon, stars, trees, humans etc.,) began with the Big Bang. Before learning about the fundamental particles and forces of nature, please read Chronology of the Universe to understand the history, present and future of our universe so that you will come to a conclusion that finding the most fundamental particle (that makes up matter) and how forces of nature interact with that particle is what we need to find out. Figure 3. Diagram of evolution of the (observable part) of the universe from the Big Bang (left) to the present [source] Above picture tells us, Big Bang happened at a specific point in time which converted energy into matter (made of particles). Using LHC, if we make proton beams to collide with each other near to speed of light, then we can discover what’s inside proton. The study of such sub-atomic particles is called particle physics which allow humans to seek answers to science’s most fundamental questions. The Standard Model Matter that we see around us is found to be made of few basic building blocks united by four fundamental forces in nature. You can read more about the standard model here. Figure 4. Standard Model of Elementary Particles It turns out that to find out these sub-atomic particles, LHC experiments generates petabyte of data per second, which means its an ultimate place to use Deep Learning algorithms. For example, an experiment at CMS (Compact Muon Solenoid) generates 40 million collisions per second (PB/s) which is filtered in real-time to 100,000 selections per second (TB/s) and 1,000 selections per second (GB/s), selecting potentially interesting events or triggers. The complexity in these experiments is so huge that if you are a data-lover, it seems like a place for you to explore, analyze, visualize and find meaning out of these. Take a look at the data center numbers of CERN shown below. Figure 5. CERN Data Center in Numbers Research Papers Some research work that I follow and read are collected below on application of deep learning algorithms for high-energy physics. Searching for Exotic Particles in High-Energy Physics with Deep Learning Deep Learning and Its Application to LHC Physics TensorNetwork: A Library for Physics and Machine Learning Topology classification with deep learning to improve real-time event selection at the LHC Accelerating Science with Generative Adversarial Networks: An Application to 3D Particle Showers in Multi-Layer Calorimeters Bi-directional RNNs and CNNs for impact parameter based tagging A jet multiclass classifier A jet is a narrow cone of hadrons and other particles produced by the hadronization of a quark or gluon. Simple Deep Neural Nets on high-level features (jet masses, multiplicities, energy correlation functions) etc., can be used to create a jet multiclass classifier. It’s very interesting to know Deep Learning algorithms such as Convolutional Neural Network (CNN), Recurrent Neural Network (RNN), Bi-directional RNN, Long-Short Term Memory (LSTM) network, Gated Recurrent Units (GRU) and Generative Adversarial Network (GAN) are used in LHC experiments to analyze and get insights about the nature of our universe. ML Challenge On 4 July 2012, CMS and ATLAS experiments at LHC confirmed the discovery of Higgs Boson. How a particle decays into other particles is the key factor to understand and measure the characteristics of the particle. It’s confirmed that Higgs Boson decays into two tau particles which is a small signal buried in background noise. Recently, I became aware of Higgs Boson Machine Learning Challenge conducted by CERN and Kaggle on 2014. Here is the link to the challenge - Higgs boson machine-learning challenge. If you know machine learning, it’s enough to participate in this competition as the task is to classify ATLAS events as tau tau decay of a higgs boson or background noise using the features characterizing the events. For a beginner like me who is interested in applying ML/DL for high-energy physics, I found this as the perfect start! Tools used for DL It’s amazing to hear that python and its ecosystem is used for data analytics in CERN LHC. Similar to how the image of black hole was created using Python and its ecosystem, we could use the same to understand more about our universe. Some of the tools used at CERN to do data analytics are Jupyter Notebook Apache Spark Apache Kafka Analytics Zoo BigDL HDFS TensorFlow Keras NumPy SciPy Pandas Matplotlib References Deep Learning on Apache Spark at CERN’s Large Hadron Collider with Intel Technologies The Rise of Deep Learning Reshaping Particle Physics Experiments with Deep Learning - Maurizio Pierini What is Dark Matter and Dark Energy? How is CERN using deep learning? Dark Energy, Dark Matter Dark Matter and Dark Energy Dark-matter made of ‘Dark Atoms’? What does CERN mean for the future of the universe Invited Talk - Deep Learning meets Physics How Does the Large Hadron Collider Work? Chronology of the universe Big Bang Time Universe Jet (particle physics)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1Dh5DXRQH0HJCZgSJ_3K-3sYT4jHRpo32" /></entry><entry><title type="html">Pandas Learning Notes</title><link href="http://localhost:4000/software/pandas-learning-notes" rel="alternate" type="text/html" title="Pandas Learning Notes" /><published>2019-06-26T00:00:00+05:30</published><updated>2019-06-26T00:00:00+05:30</updated><id>http://localhost:4000/software/pandas-learning-notes</id><content type="html" xml:base="http://localhost:4000/software/pandas-learning-notes">&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;Pandas&lt;/a&gt; is an open-source scientific computing package for Python programming language which provides high-performance, easy to use data structures and data analysis tools to work with data. Some of the domains where Pandas is used are Deep Learning, Computer Vision, Machine Learning, Image Processing, Data Analytics, Spreadsheet manipulation etc.&lt;/p&gt;

&lt;p&gt;In this page, you will find the &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;most common how to’s&lt;/strong&gt; of Pandas in Python. This might be useful for python beginners to find syntax and code quickly online in a single page.&lt;/p&gt;

&lt;div class=&quot;math-cover&quot;&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
    &lt;div class=&quot;toc-box&quot;&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#check-pandas-version&quot;&gt;Check pandas version&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#load-toy-dataset-to-work-with-pandas&quot;&gt;Load toy dataset to work with pandas&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#how-to-create-a-dataframe&quot;&gt;How to create a DataFrame?&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#how-to-view-head-of-a-dataframe&quot;&gt;How to view head of a DataFrame?&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#how-to-count-unique-values-in-a-dataframe-column&quot;&gt;How to count unique values in a dataframe column?&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#how-to-split-a-dataframe&quot;&gt;How to split a DataFrame?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As Python2 faces &lt;a href=&quot;https://pythonclock.org/&quot;&gt;end of life&lt;/a&gt;, the below code only supports &lt;strong&gt;Python3&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;check-pandas-version&quot;&gt;Check pandas version&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__version__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;'0.24.2'
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;load-toy-dataset-to-work-with-pandas&quot;&gt;Load toy dataset to work with pandas&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# please install scikit-learn - https://scikit-learn.org/ to use this dataset&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.datasets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_breast_cancer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_breast_cancer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Breast Cancer Wisconsin (Diagnostic) Database
=============================================

Notes
-----
Data Set Characteristics:
    :Number of Instances: 569

    :Number of Attributes: 30 numeric, predictive attributes and the class

    :Attribute Information:
        - radius (mean of distances from center to points on the perimeter)
        - texture (standard deviation of gray-scale values)
        - perimeter
        - area
        - smoothness (local variation in radius lengths)
        - compactness (perimeter^2 / area - 1.0)
        - concavity (severity of concave portions of the contour)
        - concave points (number of concave portions of the contour)
        - symmetry 
        - fractal dimension (&quot;coastline approximation&quot; - 1)

        The mean, standard error, and &quot;worst&quot; or largest (mean of the three
        largest values) of these features were computed for each image,
        resulting in 30 features.  For instance, field 3 is Mean Radius, field
        13 is Radius SE, field 23 is Worst Radius.

        - class:
                - WDBC-Malignant
                - WDBC-Benign

    :Summary Statistics:

    ===================================== ====== ======
                                           Min    Max
    ===================================== ====== ======
    radius (mean):                        6.981  28.11
    texture (mean):                       9.71   39.28
    perimeter (mean):                     43.79  188.5
    area (mean):                          143.5  2501.0
    smoothness (mean):                    0.053  0.163
    compactness (mean):                   0.019  0.345
    concavity (mean):                     0.0    0.427
    concave points (mean):                0.0    0.201
    symmetry (mean):                      0.106  0.304
    fractal dimension (mean):             0.05   0.097
    radius (standard error):              0.112  2.873
    texture (standard error):             0.36   4.885
    perimeter (standard error):           0.757  21.98
    area (standard error):                6.802  542.2
    smoothness (standard error):          0.002  0.031
    compactness (standard error):         0.002  0.135
    concavity (standard error):           0.0    0.396
    concave points (standard error):      0.0    0.053
    symmetry (standard error):            0.008  0.079
    fractal dimension (standard error):   0.001  0.03
    radius (worst):                       7.93   36.04
    texture (worst):                      12.02  49.54
    perimeter (worst):                    50.41  251.2
    area (worst):                         185.2  4254.0
    smoothness (worst):                   0.071  0.223
    compactness (worst):                  0.027  1.058
    concavity (worst):                    0.0    1.252
    concave points (worst):               0.0    0.291
    symmetry (worst):                     0.156  0.664
    fractal dimension (worst):            0.055  0.208
    ===================================== ====== ======

    :Missing Attribute Values: None

    :Class Distribution: 212 - Malignant, 357 - Benign

    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian

    :Donor: Nick Street

    :Date: November, 1995

This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.
https://goo.gl/U2Uwz2

Features are computed from a digitized image of a fine needle
aspirate (FNA) of a breast mass.  They describe
characteristics of the cell nuclei present in the image.

Separating plane described above was obtained using
Multisurface Method-Tree (MSM-T) [K. P. Bennett, &quot;Decision Tree
Construction Via Linear Programming.&quot; Proceedings of the 4th
Midwest Artificial Intelligence and Cognitive Science Society,
pp. 97-101, 1992], a classification method which uses linear
programming to construct a decision tree.  Relevant features
were selected using an exhaustive search in the space of 1-4
features and 1-3 separating planes.

The actual linear program used to obtain the separating plane
in the 3-dimensional space is that described in:
[K. P. Bennett and O. L. Mangasarian: &quot;Robust Linear
Programming Discrimination of Two Linearly Inseparable Sets&quot;,
Optimization Methods and Software 1, 1992, 23-34].

This database is also available through the UW CS ftp server:

ftp ftp.cs.wisc.edu
cd math-prog/cpo-dataset/machine-learn/WDBC/

References
----------
   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction 
     for breast tumor diagnosis. IS&amp;amp;T/SPIE 1993 International Symposium on 
     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,
     San Jose, CA, 1993.
   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and 
     prognosis via linear programming. Operations Research, 43(4), pages 570-577, 
     July-August 1995.
   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques
     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) 
     163-171.

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-create-a-dataframe&quot;&gt;How to create a DataFrame?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;569&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean radius'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean texture'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean perimeter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean area'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'mean smoothness'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean compactness'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean concavity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'mean concave points'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean symmetry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'mean fractal dimension'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'radius error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'texture error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'perimeter error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'area error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'smoothness error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'compactness error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'concavity error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'concave points error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'symmetry error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'fractal dimension error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'worst radius'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst texture'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst perimeter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst area'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'worst smoothness'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst compactness'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst concavity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'worst concave points'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst symmetry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'worst fractal dimension'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'target'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;(569, 31)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-view-head-of-a-dataframe&quot;&gt;How to view head of a DataFrame?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;   mean radius  mean texture  mean perimeter  ...  worst symmetry  worst fractal dimension  target
0        17.99         10.38          122.80  ...          0.4601                  0.11890     0.0
1        20.57         17.77          132.90  ...          0.2750                  0.08902     0.0
2        19.69         21.25          130.00  ...          0.3613                  0.08758     0.0
3        11.42         20.38           77.58  ...          0.6638                  0.17300     0.0
4        20.29         14.34          135.10  ...          0.2364                  0.07678     0.0

[5 rows x 31 columns]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-count-unique-values-in-a-dataframe-column&quot;&gt;How to count unique values in a DataFrame column?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;count_malignant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count_benign&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a pandas series&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_malignant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_benign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;malignant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;benign&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;malignant    212
benign       357
dtype: int64
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-split-a-dataframe&quot;&gt;How to split a dataframe?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cancerdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;(569, 30)
(569,)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf&quot; target=&quot;_blank&quot;&gt;Data Wrangling with Pandas Cheat Sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://datacamp-community-prod.s3.amazonaws.com/dbed353d-2757-4617-8206-8767ab379ab3&quot; target=&quot;_blank&quot;&gt;Pandas Cheat Sheet by DataCamp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">Pandas is an open-source scientific computing package for Python programming language which provides high-performance, easy to use data structures and data analysis tools to work with data. Some of the domains where Pandas is used are Deep Learning, Computer Vision, Machine Learning, Image Processing, Data Analytics, Spreadsheet manipulation etc. In this page, you will find the syntax and most common how to’s of Pandas in Python. This might be useful for python beginners to find syntax and code quickly online in a single page. Contents Check pandas version Load toy dataset to work with pandas How to create a DataFrame? How to view head of a DataFrame? How to count unique values in a dataframe column? How to split a DataFrame? Update: As Python2 faces end of life, the below code only supports Python3. Check pandas versioncode 1 2import pandas as pd print(pd.__version__) 1'0.24.2' Load toy dataset to work with pandascode 1 2 3 4# please install scikit-learn - https://scikit-learn.org/ to use this dataset from sklearn.datasets import load_breast_cancer cancer = load_breast_cancer() print(cancer.DESCR) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118Breast Cancer Wisconsin (Diagnostic) Database ============================================= Notes ----- Data Set Characteristics: :Number of Instances: 569 :Number of Attributes: 30 numeric, predictive attributes and the class :Attribute Information: - radius (mean of distances from center to points on the perimeter) - texture (standard deviation of gray-scale values) - perimeter - area - smoothness (local variation in radius lengths) - compactness (perimeter^2 / area - 1.0) - concavity (severity of concave portions of the contour) - concave points (number of concave portions of the contour) - symmetry - fractal dimension (&quot;coastline approximation&quot; - 1) The mean, standard error, and &quot;worst&quot; or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius. - class: - WDBC-Malignant - WDBC-Benign :Summary Statistics: ===================================== ====== ====== Min Max ===================================== ====== ====== radius (mean): 6.981 28.11 texture (mean): 9.71 39.28 perimeter (mean): 43.79 188.5 area (mean): 143.5 2501.0 smoothness (mean): 0.053 0.163 compactness (mean): 0.019 0.345 concavity (mean): 0.0 0.427 concave points (mean): 0.0 0.201 symmetry (mean): 0.106 0.304 fractal dimension (mean): 0.05 0.097 radius (standard error): 0.112 2.873 texture (standard error): 0.36 4.885 perimeter (standard error): 0.757 21.98 area (standard error): 6.802 542.2 smoothness (standard error): 0.002 0.031 compactness (standard error): 0.002 0.135 concavity (standard error): 0.0 0.396 concave points (standard error): 0.0 0.053 symmetry (standard error): 0.008 0.079 fractal dimension (standard error): 0.001 0.03 radius (worst): 7.93 36.04 texture (worst): 12.02 49.54 perimeter (worst): 50.41 251.2 area (worst): 185.2 4254.0 smoothness (worst): 0.071 0.223 compactness (worst): 0.027 1.058 concavity (worst): 0.0 1.252 concave points (worst): 0.0 0.291 symmetry (worst): 0.156 0.664 fractal dimension (worst): 0.055 0.208 ===================================== ====== ====== :Missing Attribute Values: None :Class Distribution: 212 - Malignant, 357 - Benign :Creator: Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian :Donor: Nick Street :Date: November, 1995 This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets. https://goo.gl/U2Uwz2 Features are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image. Separating plane described above was obtained using Multisurface Method-Tree (MSM-T) [K. P. Bennett, &quot;Decision Tree Construction Via Linear Programming.&quot; Proceedings of the 4th Midwest Artificial Intelligence and Cognitive Science Society, pp. 97-101, 1992], a classification method which uses linear programming to construct a decision tree. Relevant features were selected using an exhaustive search in the space of 1-4 features and 1-3 separating planes. The actual linear program used to obtain the separating plane in the 3-dimensional space is that described in: [K. P. Bennett and O. L. Mangasarian: &quot;Robust Linear Programming Discrimination of Two Linearly Inseparable Sets&quot;, Optimization Methods and Software 1, 1992, 23-34]. This database is also available through the UW CS ftp server: ftp ftp.cs.wisc.edu cd math-prog/cpo-dataset/machine-learn/WDBC/ References ---------- - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction for breast tumor diagnosis. IS&amp;amp;T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages 861-870, San Jose, CA, 1993. - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and prognosis via linear programming. Operations Research, 43(4), pages 570-577, July-August 1995. - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) 163-171. How to create a DataFrame?code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15X = cancer[&quot;data&quot;] y = np.expand_dims(cancer[&quot;target&quot;], axis=1) index = range(0, 569, 1) columns = [ 'mean radius', 'mean texture', 'mean perimeter', 'mean area', 'mean smoothness', 'mean compactness', 'mean concavity', 'mean concave points', 'mean symmetry', 'mean fractal dimension', 'radius error', 'texture error', 'perimeter error', 'area error', 'smoothness error', 'compactness error', 'concavity error', 'concave points error', 'symmetry error', 'fractal dimension error', 'worst radius', 'worst texture', 'worst perimeter', 'worst area', 'worst smoothness', 'worst compactness', 'worst concavity', 'worst concave points', 'worst symmetry', 'worst fractal dimension', 'target' ] cancerdf = pd.DataFrame(np.concatenate((X, y), axis=1), index=index, columns=columns) print(cancerdf.shape) 1(569, 31) How to view head of a DataFrame?code 1cancerdf.head() 1 2 3 4 5 6 7 8 mean radius mean texture mean perimeter ... worst symmetry worst fractal dimension target 0 17.99 10.38 122.80 ... 0.4601 0.11890 0.0 1 20.57 17.77 132.90 ... 0.2750 0.08902 0.0 2 19.69 21.25 130.00 ... 0.3613 0.08758 0.0 3 11.42 20.38 77.58 ... 0.6638 0.17300 0.0 4 20.29 14.34 135.10 ... 0.2364 0.07678 0.0 [5 rows x 31 columns] How to count unique values in a DataFrame column?code 1 2 3 4 5 6count_malignant = cancerdf[&quot;target&quot;].loc[cancerdf[&quot;target&quot;]==0.0].count() count_benign = cancerdf[&quot;target&quot;].loc[cancerdf[&quot;target&quot;]==1.0].count() # create a pandas series target = pd.Series([count_malignant, count_benign], index=[&quot;malignant&quot;, &quot;benign&quot;]) print(target) 1 2 3malignant 212 benign 357 dtype: int64 How to split a dataframe?code 1 2 3 4X = cancerdf.iloc[:, :cancerdf.shape[1]-1] y = cancerdf.iloc[:, cancerdf.shape[1]-1] print(X.shape) print(y.shape) 1 2(569, 30) (569,) References Data Wrangling with Pandas Cheat Sheet Pandas Cheat Sheet by DataCamp</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1kpEvCKb6ETgknBQzIqPu3ihThz_FZ9uK" /></entry><entry><title type="html">Django Learning Notes</title><link href="http://localhost:4000/software/django-learning-notes" rel="alternate" type="text/html" title="Django Learning Notes" /><published>2019-06-11T00:00:00+05:30</published><updated>2019-06-11T00:00:00+05:30</updated><id>http://localhost:4000/software/django-learning-notes</id><content type="html" xml:base="http://localhost:4000/software/django-learning-notes">&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;django-admin startproject &amp;lt;project-name&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;python manage.py runserver
python manage.py createsuperuser
python manage.py migrate
python manage.py startapp &amp;lt;app-name&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">1django-admin startproject &amp;lt;project-name&amp;gt; 1 2 3 4python manage.py runserver python manage.py createsuperuser python manage.py migrate python manage.py startapp &amp;lt;app-name&amp;gt;</summary></entry><entry><title type="html">Python for Hardware Design</title><link href="http://localhost:4000/hardware/python-for-hardware-design" rel="alternate" type="text/html" title="Python for Hardware Design" /><published>2019-05-26T00:00:00+05:30</published><updated>2019-05-26T00:00:00+05:30</updated><id>http://localhost:4000/hardware/python-for-asic-design</id><content type="html" xml:base="http://localhost:4000/hardware/python-for-hardware-design">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
  	&lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#why-python-is-so-popular&quot;&gt;Why Python is so popular?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#how-to-learn-python-for-free&quot;&gt;How to learn Python for free?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#python-for-automation&quot;&gt;Python for Automation&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#python-for-text-processing&quot;&gt;Python for Text Processing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#python-for-logic-design&quot;&gt;Python for Logic Design&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#python-for-ml-dl-in-hardware&quot;&gt;Python for ML/DL in Hardware&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#python-for-eda&quot;&gt;Python for EDA&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#python-for-web-dashboards&quot;&gt;Python for Web Dashboards&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;objectives&quot;&gt;
&lt;p&gt;I always get questions from my coworkers as well as my readers like the ones below.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Where do I start learning python?&lt;/li&gt; 
	&lt;li&gt;Why/How should a hardware engineer learn python in 2019?&lt;/li&gt; 
	&lt;li&gt;How python could be used to eliminate manual tasks?&lt;/li&gt;
	&lt;li&gt;Why python is preferred over other scripting languages?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;If you check out the link &lt;a href=&quot;https://octoverse.github.com/2017/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, its pretty much obvious that &lt;span class=&quot;coding&quot;&gt;javascript&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; leads the programming languages race in 2017. Python has its root in almost any major tech domain such as web development, data analytics, machine learning, deep learning, computer vision, natural language processing, audio processing etc., as shown &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, what if we use python to design, simulate and implement hardware circuits in silicon? Is it possible to take the amazing advantages that python offer over other hardware related programming languages such as HDL (verilog or vhdl), Tcl, Perl or Shell? Come let’s explore!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://drive.google.com/uc?id=1z2Y6YEAYahJA_7TgcMESLuJIqtsApkal&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;why-python-is-so-popular&quot;&gt;Why Python is so popular?&lt;/h3&gt;

&lt;p&gt;If you are a beginner to the programming world, I would highly suggest you to learn &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; first. This is because of the following major reasons.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Python is simple to learn because its very similar to how we humans think.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;More Productive&lt;/strong&gt;: Python is highly productive when compared to other languages such as &lt;span class=&quot;coding&quot;&gt;c&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;c++&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;java&lt;/span&gt; as it is much more readable, concise, expressive and takes lesser time and effort to write code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;One-liners&lt;/strong&gt;: Python has so many one-liners and english-like commands (keywords) that boosts programmers productivity a lot.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;: Python has a very big developer friendly community and its very easy to find python developers around the world in platforms such as GitHub or Stack Overflow.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Libraries&lt;/strong&gt;: Python has rich set of well documented libraries and frameworks for different tech domains as shown &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open-Source&lt;/strong&gt;: Python ecosystem is so popular because most of the libraries and frameworks available online are open-source (meaning anyone can use it for their development purposes adhering to the licenses provided).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite its advantages, python is much slower compared to languages such as &lt;span class=&quot;coding&quot;&gt;c++&lt;/span&gt;. But wait! It’s not a big disadvantage. You can still use python for most of the tasks that require minimal execution time (not speed-intensive applications such as games). That’s why data-intensive domains such as deep learning libraries use python as a high-level wrapper for a human to code and beneath that wrapper, they use C++ for faster execution.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;how-to-learn-python-for-free&quot;&gt;How to learn python for free?&lt;/h3&gt;

&lt;p&gt;When I started learning python three years back, I used the following resources. I guess, these resources are more than enough to get you comfortable with python.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/domains/python&quot; target=&quot;_blank&quot;&gt;HackerRank&lt;/a&gt; is the best learning platform for python. You have to learn and solve programs based on levels of difficulty. Once you solve programs here, you will get that confidence in using the language for your own purposes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLi01XoE8jYohWFPpC17Z-wWhPOSuh8Er-&quot; target=&quot;_blank&quot;&gt;Learn Python - Socratica&lt;/a&gt; has an excellent playlist full of neatly made python tutorials in YouTube for free. If you love learning by videos, this is the best ever python tutorial playlist out there.&lt;/li&gt;
  &lt;li&gt;Corey Schafer is another awesome YouTube channel that delivers no-bullshit python tutorials.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTt66h8cVpmbayBKlMTuS55y&quot; target=&quot;_blank&quot;&gt;Python - Setting up a Python Environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTskrapNbzXhwoFUiLCjGgY7&quot; target=&quot;_blank&quot;&gt;Python Programming Beginner Tutorials&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&quot; target=&quot;_blank&quot;&gt;Python Tutorials&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc&quot; target=&quot;_blank&quot;&gt;Python OOP Tutorials&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than these, you can check out some extensive list of learning resources that I collected for you &lt;a href=&quot;https://gogul09.github.io/software/python-programming&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-automation&quot;&gt;Python for Automation&lt;/h3&gt;

&lt;p&gt;The main use of python lies in automating repeated manual tasks that we perform daily. These manual tasks might include opening a terminal, going to a path, finding some file, parsing some values in that file, putting that parsed value in a csv file and sending a mail with that csv file attached. This is one of the classic examples where you can write a single python script to do all the steps that are mentioned.&lt;/p&gt;

&lt;p&gt;Other examples where python scripts can be used are organizing files in a particular path, manipulating strings, csv files, excel spreadsheets etc., sending email and text messages and much more. &lt;a href=&quot;https://automatetheboringstuff.com/&quot; target=&quot;_blank&quot;&gt;Automate the boring stuff with python&lt;/a&gt; is a great learning resource that you can read on how to do these.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-text-processing&quot;&gt;Python for Text Processing&lt;/h3&gt;

&lt;p&gt;Manipulating text files is a common task in any domain whether you are in VLSI, computer networking, image processing, signal processing etc., Python offers rich set of libraries and modules to do this.&lt;/p&gt;

&lt;p&gt;Some of the most commonly used text processing modules in python using which you can manipulate text files (such as CSV files, JSON files, YAML file, HTML files etc.,), perform shell operations, parse large text files, load/store very large text files and manipulate file formats are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;string&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;os&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;sys&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;re&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;csv&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;json&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;yaml&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;h5py&lt;/span&gt; module&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;bs4&lt;/span&gt; module&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-logic-design&quot;&gt;Python for Logic Design&lt;/h3&gt;

&lt;p&gt;Ok cool! Now you understood, python could be used to create automation utilities that involve text processing which reduces time involved in solving repeated manual tasks in your day-to-day work life.&lt;/p&gt;

&lt;h4 id=&quot;myhdl&quot;&gt;MyHDL&lt;/h4&gt;

&lt;p&gt;Can python be used in designing hardware circuits which typically need a HDL for writing code? Of course, there is a great open-source python project called &lt;a href=&quot;http://www.myhdl.org/&quot; target=&quot;_blank&quot;&gt;MyHDL&lt;/a&gt; that turns python into a hardware description and verification language, providing hardware engineers with the power of the python ecosystem.&lt;/p&gt;

&lt;p&gt;Moreover, MyHDL designs can be converted to verilog or VHDL automatically and implemented using a standard tool flow. Before getting too much excited about this library, please read &lt;a href=&quot;http://www.myhdl.org/start/whatitisnot.html&quot; target=&quot;_blank&quot;&gt;What MyHDL is not?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out FPGA designs using MyHDL &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/fpga-designs-with-myhdl/latest/fpga-designs-with-myhdl.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. You can check out MyHDL manual &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/myhdl/stable/myhdl.pdf&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Also, do read &lt;a href=&quot;https://www.quora.com/How-can-Python-be-used-in-hardware-designing&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; quora answer.&lt;/p&gt;

&lt;h4 id=&quot;pymtl&quot;&gt;PyMTL&lt;/h4&gt;

&lt;p&gt;Another python based hardware modeling framework is &lt;a href=&quot;https://github.com/cornell-brg/pymtl&quot;&gt;PyMTL&lt;/a&gt;. Following links provide training resources on using this library.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece4750/handouts/ece4750-tut4-verilog.pdf&quot; target=&quot;_blank&quot;&gt;Verilog Hardware Description Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece4750/handouts/ece4750-tut3-pymtl.pdf&quot; target=&quot;_blank&quot;&gt;PyMTL Hardware Modeling Framework Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cornell-ece5745/ece5745-sec-pymtl-cl/blob/master/README.md&quot; target=&quot;_blank&quot;&gt;PyMTL CL Modeling Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cornell-brg/pymtl-tut-hls/blob/master/README.md&quot; target=&quot;_blank&quot;&gt;PyMTL/HLS Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.csl.cornell.edu/courses/ece5745/handouts/ece5745-tut-asic-new.pdf&quot; target=&quot;_blank&quot;&gt;PyMTL-Based ASIC Toolflow Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-ml-dl-in-hardware&quot;&gt;Python for ML/DL in Hardware&lt;/h3&gt;

&lt;p&gt;Apart from the hypes that machine learning (ML) and deep learning (DL) have created in the recent years, still VLSI domain isn’t deeply affected by ML or DL. This is because, VLSI industry is so complex because of conflicting goals to optimize hardware designs for timing, power and area with lesser time to market.&lt;/p&gt;

&lt;p&gt;This is definitely the time to use ML or DL in hardware design, particularly creating ML models for smaller tasks in a bigger design flow. I have documented some of the current research papers and articles related to using ML or DL in VLSI chip design &lt;a href=&quot;https://gogul09.github.io/hardware/research-papers-vlsi-ml&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, for a beginner who is interested to use ML or DL in hardware design, below are the python libraries needed to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scientific Computing Stack&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.numpy.org/&quot; target=&quot;_blank&quot;&gt;NumPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scipy.org/&quot; target=&quot;_blank&quot;&gt;SciPy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot;&gt;Matplotlib&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://seaborn.pydata.org/&quot; target=&quot;_blank&quot;&gt;Seaborn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://scikit-learn.org/&quot; target=&quot;_blank&quot;&gt;Scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Deep Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://keras.io/&quot; target=&quot;_blank&quot;&gt;Keras&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-eda&quot;&gt;Python for EDA&lt;/h3&gt;

&lt;p&gt;As far as technology node reduces, the need for electronic design automation tools increases. You can’t design a multi-million instances based design manually. You need EDA tools that helps in implementation.&lt;/p&gt;

&lt;p&gt;One particular python project that I found related to EDA was &lt;a href=&quot;https://pyeda.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;PyEDA&lt;/a&gt;. You can watch &lt;a href=&quot;https://www.youtube.com/watch?v=cljDuK0ouRs&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; YouTube video to learn more about this hobby project by &lt;a href=&quot;https://github.com/cjdrake&quot; target=&quot;_blank&quot;&gt;Chris Drake&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-for-web-dashboards&quot;&gt;Python for Web Dashboards&lt;/h3&gt;

&lt;p&gt;To analyze your design data which has lots of files with millions of lines, you need a simpler way to look at important metrics, reports and status of your design in a nice looking web interface. Python provides cool libraries to create web dashboards that speeds up your productivity as well as reducing your analysis time.&lt;/p&gt;

&lt;p&gt;Using the python libraries given below, and with some HTML, CSS and JavaScript knowledge, you can create beautiful web dashboards to analyze your design data and reduce time to market a lot.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot; target=&quot;_blank&quot;&gt;Flask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.mongodb.com/python/current/&quot; target=&quot;_blank&quot;&gt;PyMongo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As you can see, &lt;span class=&quot;coding&quot;&gt;python&lt;/span&gt; can be used in multiple areas in hardware design. According to me, python has just started to find its place in hardware design. Also, I feel that it will be used by engineers around the world very soon due to its simpler nature. If you have found anything related to python that could be used for hardware design, please leave that in the comments below. Peace!&lt;/p&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents Why Python is so popular? How to learn Python for free? Python for Automation Python for Text Processing Python for Logic Design Python for ML/DL in Hardware Python for EDA Python for Web Dashboards Conclusion I always get questions from my coworkers as well as my readers like the ones below. Where do I start learning python? Why/How should a hardware engineer learn python in 2019? How python could be used to eliminate manual tasks? Why python is preferred over other scripting languages? If you check out the link here, its pretty much obvious that javascript and python leads the programming languages race in 2017. Python has its root in almost any major tech domain such as web development, data analytics, machine learning, deep learning, computer vision, natural language processing, audio processing etc., as shown here. But, what if we use python to design, simulate and implement hardware circuits in silicon? Is it possible to take the amazing advantages that python offer over other hardware related programming languages such as HDL (verilog or vhdl), Tcl, Perl or Shell? Come let’s explore! Why Python is so popular? If you are a beginner to the programming world, I would highly suggest you to learn python first. This is because of the following major reasons. Simple: Python is simple to learn because its very similar to how we humans think. More Productive: Python is highly productive when compared to other languages such as c, c++ or java as it is much more readable, concise, expressive and takes lesser time and effort to write code. One-liners: Python has so many one-liners and english-like commands (keywords) that boosts programmers productivity a lot. Community: Python has a very big developer friendly community and its very easy to find python developers around the world in platforms such as GitHub or Stack Overflow. Libraries: Python has rich set of well documented libraries and frameworks for different tech domains as shown here. Open-Source: Python ecosystem is so popular because most of the libraries and frameworks available online are open-source (meaning anyone can use it for their development purposes adhering to the licenses provided). Despite its advantages, python is much slower compared to languages such as c++. But wait! It’s not a big disadvantage. You can still use python for most of the tasks that require minimal execution time (not speed-intensive applications such as games). That’s why data-intensive domains such as deep learning libraries use python as a high-level wrapper for a human to code and beneath that wrapper, they use C++ for faster execution. How to learn python for free? When I started learning python three years back, I used the following resources. I guess, these resources are more than enough to get you comfortable with python. HackerRank is the best learning platform for python. You have to learn and solve programs based on levels of difficulty. Once you solve programs here, you will get that confidence in using the language for your own purposes. Learn Python - Socratica has an excellent playlist full of neatly made python tutorials in YouTube for free. If you love learning by videos, this is the best ever python tutorial playlist out there. Corey Schafer is another awesome YouTube channel that delivers no-bullshit python tutorials. Python - Setting up a Python Environment Python Programming Beginner Tutorials Python Tutorials Python OOP Tutorials Other than these, you can check out some extensive list of learning resources that I collected for you here. Python for Automation The main use of python lies in automating repeated manual tasks that we perform daily. These manual tasks might include opening a terminal, going to a path, finding some file, parsing some values in that file, putting that parsed value in a csv file and sending a mail with that csv file attached. This is one of the classic examples where you can write a single python script to do all the steps that are mentioned. Other examples where python scripts can be used are organizing files in a particular path, manipulating strings, csv files, excel spreadsheets etc., sending email and text messages and much more. Automate the boring stuff with python is a great learning resource that you can read on how to do these. Python for Text Processing Manipulating text files is a common task in any domain whether you are in VLSI, computer networking, image processing, signal processing etc., Python offers rich set of libraries and modules to do this. Some of the most commonly used text processing modules in python using which you can manipulate text files (such as CSV files, JSON files, YAML file, HTML files etc.,), perform shell operations, parse large text files, load/store very large text files and manipulate file formats are string module os module sys module re module csv module json module yaml module h5py module bs4 module Python for Logic Design Ok cool! Now you understood, python could be used to create automation utilities that involve text processing which reduces time involved in solving repeated manual tasks in your day-to-day work life. MyHDL Can python be used in designing hardware circuits which typically need a HDL for writing code? Of course, there is a great open-source python project called MyHDL that turns python into a hardware description and verification language, providing hardware engineers with the power of the python ecosystem. Moreover, MyHDL designs can be converted to verilog or VHDL automatically and implemented using a standard tool flow. Before getting too much excited about this library, please read What MyHDL is not? You can check out FPGA designs using MyHDL here. You can check out MyHDL manual here. Also, do read this quora answer. PyMTL Another python based hardware modeling framework is PyMTL. Following links provide training resources on using this library. Verilog Hardware Description Language PyMTL Hardware Modeling Framework Tutorial PyMTL CL Modeling Tutorial PyMTL/HLS Tutorial PyMTL-Based ASIC Toolflow Tutorial Python for ML/DL in Hardware Apart from the hypes that machine learning (ML) and deep learning (DL) have created in the recent years, still VLSI domain isn’t deeply affected by ML or DL. This is because, VLSI industry is so complex because of conflicting goals to optimize hardware designs for timing, power and area with lesser time to market. This is definitely the time to use ML or DL in hardware design, particularly creating ML models for smaller tasks in a bigger design flow. I have documented some of the current research papers and articles related to using ML or DL in VLSI chip design here. But, for a beginner who is interested to use ML or DL in hardware design, below are the python libraries needed to get started. Scientific Computing Stack NumPy SciPy Matplotlib Seaborn Pandas Machine Learning Scikit-learn Deep Learning Keras TensorFlow Python for EDA As far as technology node reduces, the need for electronic design automation tools increases. You can’t design a multi-million instances based design manually. You need EDA tools that helps in implementation. One particular python project that I found related to EDA was PyEDA. You can watch this YouTube video to learn more about this hobby project by Chris Drake. Python for Web Dashboards To analyze your design data which has lots of files with millions of lines, you need a simpler way to look at important metrics, reports and status of your design in a nice looking web interface. Python provides cool libraries to create web dashboards that speeds up your productivity as well as reducing your analysis time. Using the python libraries given below, and with some HTML, CSS and JavaScript knowledge, you can create beautiful web dashboards to analyze your design data and reduce time to market a lot. Django Flask PyMongo Conclusion As you can see, python can be used in multiple areas in hardware design. According to me, python has just started to find its place in hardware design. Also, I feel that it will be used by engineers around the world very soon due to its simpler nature. If you have found anything related to python that could be used for hardware design, please leave that in the comments below. Peace!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1XZNZ6xPx0UUCbnncmz_GBWpX7xhHJ6lo" /></entry><entry><title type="html">How to create custom tables in HTML?</title><link href="http://localhost:4000/software/how-to-create-custom-tables-in-html" rel="alternate" type="text/html" title="How to create custom tables in HTML?" /><published>2019-05-14T00:00:00+05:30</published><updated>2019-05-14T00:00:00+05:30</updated><id>http://localhost:4000/software/how-to-create-custom-tables-in-html</id><content type="html" xml:base="http://localhost:4000/software/how-to-create-custom-tables-in-html">&lt;p&gt;I always wondered is there a way to create tables like the one shown below without using nested tables (i.e., table inside a table by hacking &lt;span class=&quot;coding&quot;&gt;border&lt;/span&gt; property in CSS).&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Gender&lt;/td&gt;
    &lt;td colspan=&quot;2&quot;&gt;Average&lt;/td&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Red Eyes&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Height&lt;/td&gt;
    &lt;td&gt;Weight&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Males&lt;/td&gt;
    &lt;td&gt;165&lt;/td&gt;
    &lt;td&gt;65&lt;/td&gt;
    &lt;td&gt;30%&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Females&lt;/td&gt;
    &lt;td&gt;150&lt;/td&gt;
    &lt;td&gt;50&lt;/td&gt;
    &lt;td&gt;45%&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;If you want to create the above table using nested tables concept, you would give up on the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; of your table’s &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements. Based on your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; content, the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; property will vary, and eventually you mess up with the borders and finally, you have a messy table with misaligned borders!&lt;/p&gt;

&lt;p&gt;One hack is to use a fixed width for your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements and fill up the content based on that with &lt;span class=&quot;coding&quot;&gt;overflow: auto&lt;/span&gt; enabled in CSS. But, that’s not the best solution to this problem.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To solve this problem, we need to preserve the &lt;span class=&quot;coding&quot;&gt;width&lt;/span&gt; of the &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements somehow. And the best solution is to take a pen and paper!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Draw the table that you expect using a pen and paper to clearly understand the layout that you’re going to code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After figuring out the layout, use &lt;span class=&quot;coding&quot;&gt;rowspan&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;colspan&lt;/span&gt; attributes for your &lt;span class=&quot;coding&quot;&gt;td&lt;/span&gt; elements to bring that customized table (without any nested tables concept). It’s that simple 😊&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can look at the below code and output to understand &lt;span class=&quot;coding&quot;&gt;rowspan&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;colspan&lt;/span&gt; better.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;index.html&lt;span&gt;code&lt;/span&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Country&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Region&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Product&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Profit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;India&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Western&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;20&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Central&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rowspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Eastern&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Monitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;31&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Desk Lamp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;17&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;3&quot;&gt;Country&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Region&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Product&lt;/td&gt;
    &lt;td&gt;Profit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;6&quot;&gt;India&lt;/td&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Western&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Central&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;Eastern&lt;/td&gt;
    &lt;td&gt;Monitor&lt;/td&gt;
    &lt;td&gt;31&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Desk Lamp&lt;/td&gt;
    &lt;td&gt;17&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">I always wondered is there a way to create tables like the one shown below without using nested tables (i.e., table inside a table by hacking border property in CSS). Gender Average Red Eyes Height Weight Males 165 65 30% Females 150 50 45% If you want to create the above table using nested tables concept, you would give up on the width of your table’s td elements. Based on your td content, the width property will vary, and eventually you mess up with the borders and finally, you have a messy table with misaligned borders! One hack is to use a fixed width for your td elements and fill up the content based on that with overflow: auto enabled in CSS. But, that’s not the best solution to this problem. To solve this problem, we need to preserve the width of the td elements somehow. And the best solution is to take a pen and paper! Draw the table that you expect using a pen and paper to clearly understand the layout that you’re going to code. After figuring out the layout, use rowspan and colspan attributes for your td elements to bring that customized table (without any nested tables concept). It’s that simple 😊 You can look at the below code and output to understand rowspan and colspan better. index.htmlcode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40&amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;3&quot;&amp;gt;Country&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Region&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Product&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Profit&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;6&quot;&amp;gt;India&amp;lt;/td&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Western&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;10&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;20&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Central&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;30&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;25&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td rowspan=&quot;2&quot;&amp;gt;Eastern&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Monitor&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;31&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Desk Lamp&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;17&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; Country Region Product Profit India Western Monitor 10 Desk Lamp 20 Central Monitor 30 Desk Lamp 25 Eastern Monitor 31 Desk Lamp 17</summary></entry><entry><title type="html">C Shell Scripting Learning Notes</title><link href="http://localhost:4000/software/c-shell-scripting-learning-notes" rel="alternate" type="text/html" title="C Shell Scripting Learning Notes" /><published>2019-04-14T00:00:00+05:30</published><updated>2019-04-14T00:00:00+05:30</updated><id>http://localhost:4000/software/c-shell-scripting-learning-notes</id><content type="html" xml:base="http://localhost:4000/software/c-shell-scripting-learning-notes">&lt;div id=&quot;awesomeSideNav&quot; class=&quot;sidenav&quot;&gt;
    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;closebtn&quot; onclick=&quot;closeSideNav()&quot;&gt;&amp;times;&lt;/a&gt;
    &lt;h3&gt;&lt;a href=&quot;#basics&quot;&gt;Basics&lt;/a&gt;&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#expressions&quot;&gt;Expressions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#control-structures&quot;&gt;Control Structures&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#loops&quot;&gt;Loops&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#break&quot;&gt;break&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#continue&quot;&gt;continue&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#goto&quot;&gt;goto&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#interrupt-handling&quot;&gt;Interrupt Handling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;&lt;a href=&quot;#how-tos&quot;&gt;How to's&lt;/a&gt;&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-store-the-output-of-a-command&quot;&gt;How to store the output of a command?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-read-user-input&quot;&gt;How to read user input?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#how-to-use-single-and-double-quotes&quot;&gt;How to use single and double quotes?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#how-tos&quot;&gt;How To's&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In this page, you will find the &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;most common how to’s&lt;/strong&gt; of C Shell Scripting. This might be useful for beginners in programming or professionals in automation industries such as VLSI or Telecomm to find &lt;span class=&quot;coding&quot;&gt;csh&lt;/span&gt; syntax and code quickly using this single page online reference material. Click on any of the contents in the sidebar to view the code.&lt;/p&gt;

&lt;h3 class=&quot;centered-heading&quot; id=&quot;basics&quot;&gt;&lt;span&gt;Basics&lt;/span&gt;&lt;/h3&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;expressions&quot;&gt;Expressions&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/csh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# declaring variables&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6

&lt;span class=&quot;c&quot;&gt;# math operations (white space must taken care)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;+&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 2+6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# add&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 8&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# subtract&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; - &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 4&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# divide&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; / &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 12&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# remainder&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt; % &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;control-structures&quot;&gt;Control Structures&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# check if file exist&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-e filename&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;File exist&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# file status expressions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# d - file is a directory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# e - file exists&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# f - file is an ordinary file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# o - user owns the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# r - user has read access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# w - user has write access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# x - user has execute access to the file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# z - file is zero bytes long&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if/then/else&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 10

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is greater than b&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;lt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is lesser than b&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is equal to b&quot;&lt;/span&gt;
endif

&lt;span class=&quot;c&quot;&gt;# prints &quot;a is lesser than b&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;loops&quot;&gt;loops&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# foreach loop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# declare a word list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;colors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;white red black green blue&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# iterate over the word list (paranthesis is important)&lt;/span&gt;
foreach c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# while loop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#----------------&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &amp;lt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    @ a++
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;break&quot;&gt;break&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 &amp;gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    @ a++
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;end
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;breaked from while loop after a is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a is 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# breaked from while loop after a is 4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;continue&quot;&gt;continue&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;colors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;white red black green blue&quot;&lt;/span&gt;
foreach c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; black&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;as color is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, continuing..&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue
    &lt;/span&gt;endif
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;color is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is white&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is red&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# as color is black, continuing..&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is green&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# color is blue&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;goto&quot;&gt;goto&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 20

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;goto csk
&lt;span class=&quot;k&quot;&gt;else if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;goto rcb
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;goto kkr

csk:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is csk&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

rcb:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is rcb&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

kkr:
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is kkr&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is rcb&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;switch&quot;&gt;switch&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$#argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No arguments provided..&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;switch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;yY][eE][sS]:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is YES&quot;&lt;/span&gt;
        breaksw
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nN][oO]:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is NO&quot;&lt;/span&gt;
    default:
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Input is not YES/NO&quot;&lt;/span&gt;
        breaksw
    endsw
endif

&lt;span class=&quot;c&quot;&gt;# source test.csh yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# print &quot;Input is YES&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;interrupt-handling&quot;&gt;Interrupt Handling&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# used to transfer control to onintr statement once CTRL+C is done to kill the script.&lt;/span&gt;
onintr close
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 &amp;gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Loading avengers....&quot;&lt;/span&gt;
    sleep 2
end

close:
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Avengers killed..&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yet Ironman is safe!&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;centered-heading&quot; id=&quot;how-tos&quot;&gt;&lt;span&gt;How to's&lt;/span&gt;&lt;/h3&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-store-the-output-of-a-command&quot;&gt;How to store the output of a command?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# backquotes is used to store command's output to a variable for further processing&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints /usr2/gilango/study&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Sun Apr 14 13:45:25 IST 2019&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] &lt;span class=&quot;c&quot;&gt;# Sun &lt;/span&gt;

foreach f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# prints&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Sun&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Apr&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 14&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 13:45:25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# IST&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2019&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-read-user-input&quot;&gt;How to read user input?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# two ways to read user input&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# method 1: set a = $&amp;lt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Input a value for a: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You entered a as: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Input a value for a: 9&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You entered a as: 9&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# method 2: set a = `head -1`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Input a value for a: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;head -1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You entered a as: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Input a value for a: 21&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You entered a as: 21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 class=&quot;code-head&quot; id=&quot;how-to-use-single-and-double-quotes&quot;&gt;How to use single and double quotes?&lt;span&gt;code&lt;/span&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# single quotes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow inclusion of spaces&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * prevent variable substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow filename generation&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# double quotes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow inclusion of spaces&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow variable substitution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   * allow filename generation&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -l
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ls $a'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints ls $a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ls &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints ls -l&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">&amp;times; Basics Expressions Control Structures Loops break continue goto switch Interrupt Handling How to's How to store the output of a command? How to read user input? How to use single and double quotes? X Contents Basics How To's In this page, you will find the syntax and most common how to’s of C Shell Scripting. This might be useful for beginners in programming or professionals in automation industries such as VLSI or Telecomm to find csh syntax and code quickly using this single page online reference material. Click on any of the contents in the sidebar to view the code. Basics Expressionscode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25#!/bin/csh # declaring variables set a = 2 set b = 6 # math operations (white space must taken care) set c = `expr $a+$b` echo $c # prints 2+6 # add set c = `expr $a + $b` echo $c # prints 8 # subtract set c = `expr $b - $a` echo $c # prints 4 # divide set c = `expr $b / $a` echo $c # prints 12 # remainder set c = `expr $b % $a` echo $c # prints 12 Control Structurescode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28# check if file exist if (-e filename) echo &quot;File exist&quot; #------------------------- # file status expressions #------------------------- # d - file is a directory # e - file exists # f - file is an ordinary file # o - user owns the file # r - user has read access to the file # w - user has write access to the file # x - user has execute access to the file # z - file is zero bytes long # if/then/else set a = 5 set b = 10 if ($a &amp;gt; $b) then echo &quot;a is greater than b&quot; else if ($a &amp;lt; $b) then echo &quot;a is lesser than b&quot; else echo &quot;a is equal to b&quot; endif # prints &quot;a is lesser than b&quot; loopscode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25#---------------- # foreach loop #---------------- # declare a word list set colors = &quot;white red black green blue&quot; # iterate over the word list (paranthesis is important) foreach c ($colors) echo $c end #---------------- # while loop #---------------- set a = 0 while ($a &amp;lt; 4) echo &quot;a is $a&quot; @ a++ end # prints # a is 0 # a is 1 # a is 2 # a is 3 breakcode 1 2 3 4 5 6 7 8 9 10 11 12 13set a = 0 while (1 &amp;gt; 0) echo &quot;a is $a&quot; @ a++ if ($a == 4) break end echo &quot;breaked from while loop after a is $a&quot; # prints # a is 1 # a is 2 # a is 3 # breaked from while loop after a is 4 continuecode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15set colors = &quot;white red black green blue&quot; foreach c ($colors) if ($c == black) then echo &quot;as color is $c, continuing..&quot; continue endif echo &quot;color is $c&quot; end # prints # color is white # color is red # as color is black, continuing.. # color is green # color is blue gotocode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23set a = 20 if ($a == 10) then goto csk else if ($a == 20) then goto rcb else goto kkr csk: echo &quot;this is csk&quot; exit 1 rcb: echo &quot;this is rcb&quot; exit 1 kkr: echo &quot;this is kkr&quot; exit 1 # prints # this is rcb switchcode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18if ($#argv == 0) then echo &quot;No arguments provided..&quot; exit 1 else switch($argv[1]) case [yY][eE][sS]: echo &quot;Input is YES&quot; breaksw case [nN][oO]: echo &quot;Input is NO&quot; default: echo &quot;Input is not YES/NO&quot; breaksw endsw endif # source test.csh yes # print &quot;Input is YES&quot; Interrupt Handlingcode 1 2 3 4 5 6 7 8 9 10# used to transfer control to onintr statement once CTRL+C is done to kill the script. onintr close while (1 &amp;gt; 0) echo &quot;Loading avengers....&quot; sleep 2 end close: echo &quot;Avengers killed..&quot; echo &quot;Yet Ironman is safe!&quot; How to's How to store the output of a command?code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20# backquotes is used to store command's output to a variable for further processing set a = `pwd` echo $a # prints /usr2/gilango/study set b = `date` echo $b # Sun Apr 14 13:45:25 IST 2019 echo $b[1] # Sun foreach f ($b) echo $f end # prints # Sun # Apr # 14 # 13:45:25 # IST # 2019 How to read user input?code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20# two ways to read user input # method 1: set a = $&amp;lt; echo -n &quot;Input a value for a: &quot; set a = $&amp;lt; echo &quot;You entered a as: $a&quot; # prints # Input a value for a: 9 # You entered a as: 9 # method 2: set a = `head -1` echo -n &quot;Input a value for a: &quot; set a = `head -1` echo &quot;You entered a as: $a&quot; # prints # Input a value for a: 21 # You entered a as: 21 How to use single and double quotes?code 1 2 3 4 5 6 7 8 9 10 11 12 13# single quotes # * allow inclusion of spaces # * prevent variable substitution # * allow filename generation # double quotes # * allow inclusion of spaces # * allow variable substitution # * allow filename generation set a = -l echo 'ls $a' # prints ls $a echo &quot;ls $a&quot; # prints ls -l</summary></entry><entry><title type="html">Data Structures &amp;amp; Algorithms in Python</title><link href="http://localhost:4000/software/data-structures-and-algorithms-in-python" rel="alternate" type="text/html" title="Data Structures &amp; Algorithms in Python" /><published>2018-12-28T00:00:00+05:30</published><updated>2018-12-28T00:00:00+05:30</updated><id>http://localhost:4000/software/data-structures-python</id><content type="html" xml:base="http://localhost:4000/software/data-structures-and-algorithms-in-python">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#time-complexity&quot;&gt;Time Complexity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#complexity-classes&quot;&gt;Complexity Classes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#bubble-sort&quot;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#quick-sort&quot;&gt;Quick Sort&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;time-complexity&quot;&gt;Time Complexity&lt;/h3&gt;

&lt;p&gt;Instead of asking, &lt;em&gt;how much time does it take to run a function&lt;/em&gt;, in time complexity’s language, we ask &lt;em&gt;how does the runtime of a function grow?&lt;/em&gt; To learn more about Big O notation and Time Complexity, please watch &lt;a href=&quot;https://www.youtube.com/watch?v=D6xkbGLQesk&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; excellent video.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
    &lt;p&gt;&lt;b&gt;Finding Time Complexity&lt;/b&gt;&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Find the fastest growing term&lt;/li&gt;
        &lt;li&gt;Take out the coefficient&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;\(O(1)\) - Swap two numbers.&lt;/li&gt;
  &lt;li&gt;\(O(logn)\) - Search in a sorted array with binary search.&lt;/li&gt;
  &lt;li&gt;\(O(n)\) - Search for a maximum element in an unsorted array.&lt;/li&gt;
  &lt;li&gt;\(O(n*logn)\) - Merge Sort, Quick Sort, Heap Sort.&lt;/li&gt;
  &lt;li&gt;\(O(n^2)\) - Bubble Sort.&lt;/li&gt;
  &lt;li&gt;\(O(2^n)\) - Travelling Salesman Problem with Dynamic Programming.&lt;/li&gt;
  &lt;li&gt;\(O(n!)\) - Travelling Salesman Problem with Brute Force Search.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1oIw8LnBDfmWtKmDsbAdXvRSxmHNOQXSr&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Big O &amp;amp; Time Complexity&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;complexity-classes&quot;&gt;Complexity Classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;\(\text{P}\) - Polynomial
    &lt;ul&gt;
      &lt;li&gt;One of the most fundamental complexity classes.&lt;/li&gt;
      &lt;li&gt;Contains all decision problems that can be solved by a deterministic Turing machine.&lt;/li&gt;
      &lt;li&gt;\(\text{P}\) is the class of computational problems that are efficiently solvable.&lt;/li&gt;
      &lt;li&gt;Ex: sorting algorithms.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP}\) - Non-deterministic Polynomial
    &lt;ul&gt;
      &lt;li&gt;If we have a solution to a problem, we can verify this solution in polynomial time (by a deterministic Turing machine).&lt;/li&gt;
      &lt;li&gt;For instance where the answer in Yes, have efficiently verifiable proofs of the fact that the answer is indeed yes.&lt;/li&gt;
      &lt;li&gt;The complexity class \(\text{P}\) is contained in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;Most important question is \(\text{N}\) = \(\text{NP}\) is it true?&lt;/li&gt;
      &lt;li&gt;Ex: Integer Factorization, Travelling Salesman Problem.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP complete}\)
    &lt;ul&gt;
      &lt;li&gt;A decision problem is \(\text{NP complete}\) when it is both in \(\text{NP}\) and \(\text{NP hard}\).&lt;/li&gt;
      &lt;li&gt;Although any given solution to an \(\text{NP complete}\) problem can be verified in polynomial time, there is no known efficient way to locate a solution in the first place.&lt;/li&gt;
      &lt;li&gt;We ususually just look for an approximate solution.&lt;/li&gt;
      &lt;li&gt;Ex: Chinese Postman Problem, Graph Coloring, Hamiltonian Cycle.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;\(\text{NP hard}\)
    &lt;ul&gt;
      &lt;li&gt;This is a class of problems that are at least as hard as the hardest problems in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;A problem H is \(\text{NP hard}\) when every problem L in \(\text{NP}\) can be reduced in polynomial time to H.&lt;/li&gt;
      &lt;li&gt;As a consequence, finding a polynomial algorithm to solve any \(\text{NP hard}\) problem would give polynomial algorithms for all the problems in \(\text{NP}\).&lt;/li&gt;
      &lt;li&gt;Ex: Halting problem.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linked-list&quot;&gt;Linked List&lt;/h3&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;linked_list.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# class to create a node that has data and pointer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# class to create a linked list of nodes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;linked_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR: index out of range!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ERROR: index out of range!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;last_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;last_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Element at 2nd index: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Elements after erasing element at index 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[1, 2, 3, 4]
Element at 2nd index: 3
Elements after erasing element at index 2
[1, 2, 4]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bubble-sort&quot;&gt;Bubble Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=12AOX_kQQ9hypZxMf7ISz7yNcCmL2SrzH&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Bubble Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;bubble_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bubble sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubble_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubble_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[37, 36, 13, 12, 43, 4, 32, 14, 32, 4]
[4, 4, 12, 13, 14, 32, 32, 36, 37, 43]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=13bP9IE_XhDD6dympWB5DqGIhKfgefEsT&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Merge Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;merge_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;m&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# merge sort to combine two arrays&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# final output array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# merge sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#-------------------------------------&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# a list of zero or one elements is sorted, by definition&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# split the list in half and call merge sort recursively on each half&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# merge the now-sorted sublists&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[45, 8, 25, 1, 32, 37, 34, 3, 4, 3]
[1, 3, 3, 4, 8, 25, 32, 34, 37, 45]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;quick-sort&quot;&gt;Quick Sort&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=15Gj4lbSkyka2zTIz2EwSkELfTWjOj-k9&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Quick Sort&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;quick_sort.py&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create randomized array of length &quot;length&quot;m&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# array integers are of range 0, maxint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_arr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# quick sort algorithm to input array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# a list of zero or one elements is sorted, by definition&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# list to hold values based on pivot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# choose a random pivot element&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# iterate over each element and compare with pivot  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# recursively quick sort sub list and concatenate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smaller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;code-output highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;[3, 27, 12, 8, 12, 39, 1, 2, 23, 8]
[1, 2, 3, 8, 8, 12, 12, 23, 27, 39]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">X Contents Time Complexity Complexity Classes Linked List Bubble Sort Merge Sort Quick Sort Time Complexity Instead of asking, how much time does it take to run a function, in time complexity’s language, we ask how does the runtime of a function grow? To learn more about Big O notation and Time Complexity, please watch this excellent video. Finding Time Complexity Find the fastest growing term Take out the coefficient \(O(1)\) - Swap two numbers. \(O(logn)\) - Search in a sorted array with binary search. \(O(n)\) - Search for a maximum element in an unsorted array. \(O(n*logn)\) - Merge Sort, Quick Sort, Heap Sort. \(O(n^2)\) - Bubble Sort. \(O(2^n)\) - Travelling Salesman Problem with Dynamic Programming. \(O(n!)\) - Travelling Salesman Problem with Brute Force Search. Big O &amp;amp; Time Complexity Complexity Classes \(\text{P}\) - Polynomial One of the most fundamental complexity classes. Contains all decision problems that can be solved by a deterministic Turing machine. \(\text{P}\) is the class of computational problems that are efficiently solvable. Ex: sorting algorithms. \(\text{NP}\) - Non-deterministic Polynomial If we have a solution to a problem, we can verify this solution in polynomial time (by a deterministic Turing machine). For instance where the answer in Yes, have efficiently verifiable proofs of the fact that the answer is indeed yes. The complexity class \(\text{P}\) is contained in \(\text{NP}\). Most important question is \(\text{N}\) = \(\text{NP}\) is it true? Ex: Integer Factorization, Travelling Salesman Problem. \(\text{NP complete}\) A decision problem is \(\text{NP complete}\) when it is both in \(\text{NP}\) and \(\text{NP hard}\). Although any given solution to an \(\text{NP complete}\) problem can be verified in polynomial time, there is no known efficient way to locate a solution in the first place. We ususually just look for an approximate solution. Ex: Chinese Postman Problem, Graph Coloring, Hamiltonian Cycle. \(\text{NP hard}\) This is a class of problems that are at least as hard as the hardest problems in \(\text{NP}\). A problem H is \(\text{NP hard}\) when every problem L in \(\text{NP}\) can be reduced in polynomial time to H. As a consequence, finding a polynomial algorithm to solve any \(\text{NP hard}\) problem would give polynomial algorithms for all the problems in \(\text{NP}\). Ex: Halting problem. Linked List codelinked_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71# class to create a node that has data and pointer class node: def __init__(self, data=None): self.data = data self.next = None # class to create a linked list of nodes class linked_list: def __init__(self): self.head = node() def append(self, data): new_node = node(data) cur = self.head while cur.next != None: cur = cur.next cur.next = new_node def length(self): cur = self.head total = 0 while cur.next != None: total += 1 cur = cur.next return total def display(self): elems = [] cur_node = self.head while cur_node.next != None: cur_node = cur_node.next elems.append(cur_node.data) print(elems) def get(self, index): if index &amp;gt;= self.length(): print(&quot;ERROR: index out of range!&quot;) return None cur_idx = 0 cur_node = self.head while True: cur_node = cur_node.next if cur_idx == index: return cur_node.data cur_idx += 1 def erase(self, index): if index &amp;gt;= self.length(): print(&quot;ERROR: index out of range!&quot;) return None cur_idx = 0 cur_node = self.head while True: last_node = cur_node cur_node = cur_node.next if cur_idx == index: last_node.next = cur_node.next return cur_idx += 1 if __name__ == '__main__': my_list = linked_list() my_list.append(1) my_list.append(2) my_list.append(3) my_list.append(4) my_list.display() print(&quot;Element at 2nd index: {}&quot;.format(my_list.get(2))) my_list.erase(2) print(&quot;Elements after erasing element at index 2&quot;) my_list.display() 1 2 3 4[1, 2, 3, 4] Element at 2nd index: 3 Elements after erasing element at index 2 [1, 2, 4] Bubble Sort Bubble Sort codebubble_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26from random import randint # create randomized array of length &quot;length&quot; # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr #------------------------------------- # bubble sort algorithm to input array #------------------------------------- def bubble_sort(arr): swapped = True while swapped: swapped = False for i in range(1, len(arr)): if arr[i-1] &amp;gt; arr[i]: arr[i], arr[i-1] = arr[i-1], arr[i] swapped = True return arr if __name__ == '__main__': a = create_array() print(a) a = bubble_sort(a) print(a) 1 2[37, 36, 13, 12, 43, 4, 32, 14, 32, 4] [4, 4, 12, 13, 14, 32, 32, 36, 37, 43] Merge Sort Merge Sort codemerge_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49from random import randint # create randomized array of length &quot;length&quot;m # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr #------------------------------------- # merge sort to combine two arrays #------------------------------------- def merge(a,b): # final output array c = [] a_idx, b_idx = 0, 0 while a_idx&amp;lt;len(a) and b_idx&amp;lt;len(b): if a[a_idx]&amp;lt;b[b_idx]: c.append(a[a_idx]) a_idx += 1 else: c.append(b[b_idx]) b_idx += 1 if a_idx == len(a): c.extend(b[b_idx:]) else: c.extend(a[a_idx:]) return c #------------------------------------- # merge sort algorithm to input array #------------------------------------- def merge_sort(a): # a list of zero or one elements is sorted, by definition if len(a) &amp;lt;= 1: return a # split the list in half and call merge sort recursively on each half mid = int(len(a)/2) left, right = merge_sort(a[:mid]), merge_sort(a[mid:]) # merge the now-sorted sublists return merge(left,right) if __name__ == '__main__': a = create_array() print(a) s = merge_sort(a) print(s) 1 2[45, 8, 25, 1, 32, 37, 34, 3, 4, 3] [1, 3, 3, 4, 8, 25, 32, 34, 37, 45] Quick Sort Quick Sort codequick_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34from random import randint # create randomized array of length &quot;length&quot;m # array integers are of range 0, maxint def create_array(length=10, maxint=50): new_arr = [randint(0, maxint) for _ in range(length)] return new_arr # quick sort algorithm to input array def quick_sort(a): # a list of zero or one elements is sorted, by definition if len(a) &amp;lt;= 1: return a # list to hold values based on pivot smaller, equal, larger = [], [], [] # choose a random pivot element pivot = a[randint(0,len(a)-1)] # iterate over each element and compare with pivot for x in a: if x&amp;lt;pivot: smaller.append(x) elif x==pivot: equal.append(x) else: larger.append(x) # recursively quick sort sub list and concatenate return quick_sort(smaller) + equal + quick_sort(larger) if __name__ == '__main__': a = create_array() print(a) s = quick_sort(a) print(s) 1 2[3, 27, 12, 8, 12, 39, 1, 2, 23, 8] [1, 2, 3, 8, 8, 12, 12, 23, 27, 39]</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1BmxJGJpdBOkiDG5cNaWfzFwA155PLRtp" /></entry><entry><title type="html">VLSI Physical Design Flow</title><link href="http://localhost:4000/hardware/physical-design-flow-1" rel="alternate" type="text/html" title="VLSI Physical Design Flow" /><published>2018-12-26T00:00:00+05:30</published><updated>2018-12-26T00:00:00+05:30</updated><id>http://localhost:4000/hardware/vlsi-physical-design-flow-1</id><content type="html" xml:base="http://localhost:4000/hardware/physical-design-flow-1">&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#what-is-vlsi-physical-design&quot;&gt;What is VLSI Physical Design?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#why-vlsi-physical-design-flow&quot;&gt;Why VLSI Physical Design Flow?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#vlsi-physical-design-flow&quot;&gt;VLSI Physical Design Flow&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#importing-inputs&quot;&gt;Importing Inputs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#floorplanning-and-partitioning&quot;&gt;Floorplanning &amp;amp; Partitioning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#power-planning&quot;&gt;Power Planning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_7&quot; href=&quot;#placement&quot;&gt;Placement&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_8&quot; href=&quot;#clock-tree-synthesis&quot;&gt;Clock Tree Synthesis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_9&quot; href=&quot;#routing&quot;&gt;Routing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_10&quot; href=&quot;#static-timing-analysis&quot;&gt;Static Timing Analysis&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_11&quot; href=&quot;#power-verification&quot;&gt;Power Verification&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_12&quot; href=&quot;#physical-verification&quot;&gt;Physical Verification&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_13&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;When I was a kid, I used to spend time with playstation and computers. At that time, I always wondered how those tiny components inside rectangular black boxes entertain me by making me play cool games and watch movies. When I grew up, I realized its the combination of &lt;a href=&quot;https://www.britannica.com/technology/logic-design&quot; target=&quot;_blank&quot;&gt;logic design&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_design_(electronics)&quot; target=&quot;_blank&quot;&gt;physical design&lt;/a&gt; that makes an Integrated Circuit that is sitting inside the device you currently hold in your hand.&lt;/p&gt;

&lt;p&gt;In this blog post, we will learn the basics of VLSI physical design or VLSI backend design that is used to create modern Integrated Circuits (ICs) that power up numerous electronic applications such as desktop, laptop, tablet, smartphone etc.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=19X_ir_iqjaZjwyd7TOUbWucIo7M9juXC&quot; /&gt;
    &lt;figcaption&gt;Logic Design (Frontend) vs Physical Design (Backend)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;what-is-vlsi-physical-design&quot;&gt;What is VLSI Physical Design?&lt;/h3&gt;

&lt;p&gt;The final output of a frontend design or circuit design or logic design is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Netlist&quot; target=&quot;_blank&quot;&gt;netlist&lt;/a&gt;. Netlist is a text file (ending with &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt;) that contains the logical functionality of your chip. This netlist could be viewed as a plethora of instances (standard cells, macros, io pads etc.,) with interconnections (nets) between them based on the functionality you wish to implement.&lt;/p&gt;

&lt;p&gt;Typically, there are two types of netlist when designing a chip.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RTL netlist&lt;/li&gt;
  &lt;li&gt;Gate-level netlist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RTL netlist is the high-level abstraction of the design using which logic design engineers write code in &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt;. This netlist is created with logic functionality of the design as its primary goal.&lt;/p&gt;

&lt;p&gt;Gate-level netlist is the output of a design stage called &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_synthesis&quot; target=&quot;_blank&quot;&gt;logic synthesis&lt;/a&gt; which takes in RTL netlist, design constraints and technology files, and generates a netlist that has standard cells and interconnections (nets) between them.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1oXRFkLyBL1DbIMJPxffVHpSrxLc8QSi6&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 1. Logic Synthesis - RTL netlist to Gate-level netlist&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This connectivity information in a gate-level netlist is a layer of abstraction of your hardware which must be converted to a physically realizable format (having geometric shapes) that is manufacturable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The process of converting a gate-level netlist into a physically realizable format (GDSII) which finally becomes the hardware (chip) is called &lt;strong&gt;Physical Design&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1UukCMvCLe6YCEXghL6pVpr8TOzkaYE-D&quot; /&gt;
    &lt;figcaption&gt;Figure 2. Circuit to Layout&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Actually, Physical Design contains a lot more steps to be done than the above simplified definition. Figure 2 shows the conversion of a simple transistor level circuit to a physically realizable layout. It would be a dream come true for any hardware engineer if there is a tool that takes in a gate-level netlist and constructs a physical layout that is optimized for performance, power and area at lower technology nodes!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/GDSII&quot; target=&quot;_blank&quot;&gt;GDSII&lt;/a&gt; layout format is a binary file format that represents your IC layout using geometric shapes, text labels and additional foundry specific information in a hierarchical form. You will understand what this means by looking at the video below which shows a GDSII layout file in 3D (created by IC Design Group at University of Twente).&lt;/p&gt;

&lt;div class=&quot;youtube-video-container&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/F4EArOqNNSU?start=3&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In VLSI, Physical Design is the only domain where you can see circuits in a Graphical User Interface (GUI) with geometric shapes and colors as shown in Figure 3. It is an excellent career choice for engineering minds with an &lt;em&gt;artistic&lt;/em&gt; background because you will be drawing layout specific geometries either manually or using code!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=13C4Wv7XlTi9WUdiC7q_EBHD1jxPjsGcD&quot; /&gt;
    &lt;figcaption&gt;Figure 3. A typical chip when looked from a physical design perspective&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By this time, you might be overwhelmed by the complexity of the layout artwork (which finally becomes your hardware IC) that you have just seen in the above video and image. But, don’t worry. This is where automation becomes your friend!&lt;/p&gt;

&lt;p&gt;Physical Design involves dedicated automation flows and methodologies for each and every step in the design process with the help of Electronic Design Automation (EDA) tools and scripts written in languages such as Tcl, Perl or Python.&lt;/p&gt;

&lt;p&gt;A design will never function as expected if it is not verified and validated 100% before manufacturing. Hence, Physical Design involves robust verification flows (or the so-called &lt;a href=&quot;https://en.wikipedia.org/wiki/Signoff_(electronic_design_automation)&quot; target=&quot;_blank&quot;&gt;signoff&lt;/a&gt; flows) to verify and validate the design in terms of timing, power, area and functionality.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-vlsi-physical-design-flow&quot;&gt;Why VLSI Physical Design Flow?&lt;/h3&gt;

&lt;p&gt;Physical design is all about placing instances defined in the netlist and connecting them by routing through metal layer stack to satisfy design specifications such as performance, power and area (PPA). Current IC designs have &lt;em&gt;multi-million instances&lt;/em&gt; that are interconnected with &lt;em&gt;several stack of metal layers&lt;/em&gt; that connect these instances. Manually performing each step in the design process is not feasible, takes huge amount of time and is error prone.&lt;/p&gt;

&lt;p&gt;The complexity in designing a multi-million instance based IC is huge and hence we need dedicated automation flows that complete specific tasks needed to be performed at each step in the design which reduces design time and errors. These flows require knowledge and understanding of &lt;a href=&quot;https://en.wikipedia.org/wiki/Electronic_design_automation&quot; target=&quot;_blank&quot;&gt;EDA tools&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Scripting_language&quot; target=&quot;_blank&quot;&gt;scripting languages&lt;/a&gt; such as Tcl, Perl or Python.&lt;/p&gt;

&lt;p&gt;In addition to complexity, as time to market for chips is decreasing, reuse of IP (Intellectual Property) blocks is highly preferred in each design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;vlsi-physical-design-flow&quot;&gt;VLSI Physical Design Flow&lt;/h3&gt;

&lt;p&gt;Typical VLSI Physical Design (PD) flow is shown in Figure 4. This is a standard flow that is followed in modern IC design. Each step in the PD flow has sub flows or further steps that are needed to be performed.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=116LfKvpnRinjDT7uVDttK7q2WTqWiqh7&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 4. VLSI Physical Design Flow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Major steps involved in Physical Design are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Importing Inputs&lt;/li&gt;
  &lt;li&gt;Floorplanning &amp;amp; Partitioning&lt;/li&gt;
  &lt;li&gt;Power Planning&lt;/li&gt;
  &lt;li&gt;Placement&lt;/li&gt;
  &lt;li&gt;Clock Tree Synthesis (CTS)&lt;/li&gt;
  &lt;li&gt;Routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Major verification (signoff) steps involved in Physical Design are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Static Timing Analysis (STA)&lt;/li&gt;
  &lt;li&gt;Power Distribution Network Analysis (PDN)&lt;/li&gt;
  &lt;li&gt;Physical Verification (PV)&lt;/li&gt;
  &lt;li&gt;Formal Verification (FV)&lt;/li&gt;
  &lt;li&gt;Conformal Low Power Verification (CLP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commonly used EDA tools for Floorplanning, Place and Route are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/hierarchical-design-and-floorplanning/innovus-implementation-system.html&quot;&gt;Cadence Innovus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/block-implementation/first-encounter-design-exploration-and-prototyping.html&quot; target=&quot;_blank&quot;&gt;Cadence First Encounter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/physical-implementation/ic-compiler-ii.html&quot; target=&quot;_blank&quot;&gt;Synopsys IC Compiler II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commonly used EDA tools for signoff checks are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/signoff/starrc.html&quot; target=&quot;_blank&quot;&gt;Synopsys StarRC&lt;/a&gt; for Parasitic Extraction&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synopsys.com/implementation-and-signoff/signoff/primetime.html&quot; target=&quot;_blank&quot;&gt;Synopsys PrimeTime&lt;/a&gt; for Static Timing Analysis&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansys.com/products/semiconductors/ansys-redhawk&quot; target=&quot;_blank&quot;&gt;Apache RedHawk&lt;/a&gt; for Power Analysis and Debugging&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mentor.com/training/course_categories/calibre&quot; target=&quot;_blank&quot;&gt;Mentor Graphics Calibre&lt;/a&gt; for Physical Verification&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/logic-equivalence-checking.html&quot; target=&quot;_blank&quot;&gt;Cadence Logic Equivalence Checker&lt;/a&gt; for Formal Verification&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cadence.com/content/cadence-www/global/en_US/home/tools/digital-design-and-signoff/low-power-validation/conformal-low-power.html&quot; target=&quot;_blank&quot;&gt;Cadence Conformal Low Power&lt;/a&gt; for Conformal Low Power Verification&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;importing-inputs&quot;&gt;Importing Inputs&lt;/h3&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Gather all the required inputs for physical design such as gate level netlist &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; / &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt;, Technology file &lt;span class=&quot;coding&quot;&gt;.tech&lt;/span&gt;, UPF (Unified Power Format) files &lt;span class=&quot;coding&quot;&gt;.upf&lt;/span&gt;, Library files that include LIBs &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt;, LEFs &lt;span class=&quot;coding&quot;&gt;.lef&lt;/span&gt;, DEFs &lt;span class=&quot;coding&quot;&gt;.def&lt;/span&gt; and GDS &lt;span class=&quot;coding&quot;&gt;.gds&lt;/span&gt; of standard cells and IPs and SDC (Synopsys Design Constraint) files &lt;span class=&quot;coding&quot;&gt;.sdc&lt;/span&gt;. &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Inputs to physical design are the most important files that you will need to start your design process. If the inputs are read in the EDA tools without any issues (warnings and errors), then your physical design flow goes smooth.&lt;/p&gt;

&lt;p&gt;Commonly required inputs to start physical design for an IC are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Gate-level Netlist &lt;span class=&quot;coding&quot;&gt;.v&lt;/span&gt; or &lt;span class=&quot;coding&quot;&gt;.vhdl&lt;/span&gt; (given by synthesis people)&lt;/li&gt;
  &lt;li&gt;Technology file &lt;span class=&quot;coding&quot;&gt;.tech&lt;/span&gt; (given by fabrication people)&lt;/li&gt;
  &lt;li&gt;Logical libraries &lt;span class=&quot;coding&quot;&gt;.lib&lt;/span&gt; (given by vendors)&lt;/li&gt;
  &lt;li&gt;Physical libraries &lt;span class=&quot;coding&quot;&gt;.lef&lt;/span&gt; &lt;span class=&quot;coding&quot;&gt;.def&lt;/span&gt; &lt;span class=&quot;coding&quot;&gt;.gds&lt;/span&gt; (given by vendors)&lt;/li&gt;
  &lt;li&gt;UPF (Unified Power Format) files &lt;span class=&quot;coding&quot;&gt;.upf&lt;/span&gt; (given by UPF people)&lt;/li&gt;
  &lt;li&gt;SDC (Synopsys Design Constraints) files &lt;span class=&quot;coding&quot;&gt;.sdc&lt;/span&gt; (given by synthesis people)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;floorplanning-and-partitioning&quot;&gt;Floorplanning &amp;amp; Partitioning&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#floorplanning&quot; target=&quot;_blank&quot;&gt;Floorplanning&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Calculate the die size, create IO ring, partition the design and calculate the size, shape and placement of partitions (HMs or blocks), figure out the position of custom macros such as analog macros and create PG grid.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In today’s IC design, because of huge design complexity, hierarchical design approach is followed. What this means is, the entire chip is divided into partitions or blocks that are interconnected at a &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module.&lt;/p&gt;

&lt;p&gt;Figure 5 shows a typical &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; floorplan module of an IC with abutted blocks, non-abutted blocks and routing channels.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1OEMmPap64JbLTyrgeSCv-GoQ9xCGhzv5&quot; /&gt;
    &lt;figcaption&gt;Figure 5. A typical view of top-level floorplan of an IC&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module of your chip contains hard blocks and soft blocks with or without glue logic (standard cells in &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hard&lt;/strong&gt; blocks are those sub-blocks whose shapes &lt;em&gt;cannot&lt;/em&gt; be changed. These blocks are mostly IPs or &lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#macro&quot; target=&quot;_blank&quot;&gt;macros&lt;/a&gt; that are already designed and validated for that particular &lt;a href=&quot;https://en.wikichip.org/wiki/technology_node&quot; target=&quot;_blank&quot;&gt;technology node&lt;/a&gt;. Placement of these blocks are decided based on design understanding and package requirements in &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Soft&lt;/strong&gt; blocks are those blocks whose shapes &lt;em&gt;can&lt;/em&gt; be changed to meet predefined cost metrics such as chip area, wirelength and wire congestion. These are the blocks that are needed to be designed and validated for chip-level convergence. In industry terms, these &lt;strong&gt;soft&lt;/strong&gt; blocks are called as &lt;strong&gt;Hard Macros&lt;/strong&gt; or &lt;strong&gt;HMs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During floorplanning, one must ensure proper shapes for the Hard Macros (HMs) until convergence is reached in terms of cost metrics, timing, power and area.&lt;/p&gt;

&lt;p&gt;Due to design complexity and runtime of EDA tools, each Hard Macro (HM) or block is created using the same design steps such as floorplanning, placement and routing and then integrated at the &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt; module.&lt;/p&gt;

&lt;p&gt;Dividing the entire design into smaller sub-designs (partitions) makes design convergence easier. This is because, the runtime of EDA tools for a single partition (block) will take lesser time for each step in the PD flow when compared to entire design.&lt;/p&gt;

&lt;p&gt;Physical Design is all about tradeoffs between &lt;strong&gt;area&lt;/strong&gt;, &lt;strong&gt;speed&lt;/strong&gt; and &lt;strong&gt;power&lt;/strong&gt;. Thus, floorplanning is a &lt;em&gt;highly iterative process&lt;/em&gt; which takes into account the hard blocks and soft blocks used, memories, IO pads and their placement in the design, routing possibilities between different blocks and inside the blocks, power grid structure for each macro and cell in the design, and also the aspect ratio and IO structure of the entire design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;power-planning&quot;&gt;Power Planning&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#power-distribution&quot; target=&quot;_blank&quot;&gt;Power Distribution&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal&lt;/b&gt;: Decide on power dissipation number and construct power distribution network accordingly to power up blocks, IO pads, macros and standard cells.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; that you see in the transistor level circuit in Figure 2 needs to be supplied to every transistor in a multi-million transistor design. Thus, power from a single battery source must be delivered to each cell in the design. To accomplish this, power planning is done.&lt;/p&gt;

&lt;p&gt;During floorplanning, power planning is a step that is done to construct the power distribution network to supply power to all blocks, macros and standard cells equally.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1ECjeWM7ftyeFnILkx4IPcm6sQDtPPlCT&quot; /&gt;
    &lt;figcaption&gt;Figure 6. Power Planning (or Power Distribution) in an IC&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown in Figure 6, there are two types of power distribution strategies followed in chip design namely Wire Bonding and Flip-Chip &lt;a href=&quot;https://gogul09.github.io/hardware/power-distribution-network-in-asic-physical-design&quot; target=&quot;_blank&quot;&gt;(read more)&lt;/a&gt;. Using any one of these two power distribution strategies, we usually form power rings, stripes and rails through out the design.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rings&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; around the chip.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stripes&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; across/throughout the chip.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rails&lt;/strong&gt; - Supplies &lt;span class=&quot;coding&quot;&gt;VDD&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;VSS&lt;/span&gt; to the standard cells in the design.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Main steps to be taken care during power planning are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decision on width, pitch and offset of power stripes for each metal layer.&lt;/li&gt;
  &lt;li&gt;Block power hook up at &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;IO power hook up at &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Standard cells power hook up inside block as well as &lt;span class=&quot;coding&quot;&gt;TOP_LEVEL&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Shorts and Opens are to be checked and fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;placement&quot;&gt;Placement&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#placement&quot; target=&quot;_blank&quot;&gt;Placement&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Place all the standard cells in the design to minimize total area, reduce interconnect cost, reduce congestion hotspots and improve timing. &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;After floorplanning the design, for each block, &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_cell&quot; target=&quot;_blank&quot;&gt;standard cells&lt;/a&gt; are placed inside the block. These standard cells are the functional cells that contain the necessary logic functionality for your chip that are provided to you by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiconductor_fabrication_plant&quot; target=&quot;_blank&quot;&gt;foundry&lt;/a&gt;. Inside the standard cells, you could find the individual transistors that make up the logic functionality. &lt;em&gt;Ex: AND gate, OR gate, 2x1 multiplexer etc.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you think of a &lt;strong&gt;chip&lt;/strong&gt; as the &lt;strong&gt;house&lt;/strong&gt;, then &lt;strong&gt;placement&lt;/strong&gt; is the process of placing &lt;strong&gt;each individual brick&lt;/strong&gt; (standard cell) that make up the house.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a multi-million instances design, placing these cells manually is not feasible. Hence, EDA tool place these cells in the standard cell rows (created during floorplanning) with conflicting goals of optimizing congestion, timing and power. Placement is carried out with the help of virtual route.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1mEe5AAlGsVv6Xt0llBfxpBA_nUcgs-uo&quot; class=&quot;typical-image&quot; /&gt;
    &lt;figcaption&gt;Figure 7. Placement&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Virtual route is a rough estimate for the EDA tool to measure the shortest &lt;a href=&quot;https://www.quora.com/What-is-Manhattan-Distance&quot; target=&quot;_blank&quot;&gt;manhattan distance&lt;/a&gt; from one standard cell pin to another. Based on this distance, timing is calculated roughly and these cells are placed accordingly.&lt;/p&gt;

&lt;p&gt;A good placement reduces the delay of interconnect wires, has shorter interconnect wire length and has lesser congestion hotspots. One key thing performed during placement is &lt;strong&gt;legalization&lt;/strong&gt; which means placing standard cells at appropriate locations without any placement constraint violation or design rule violation. Placement greatly determines the routability of the design.&lt;/p&gt;

&lt;p&gt;Standard placement flow involves the following steps.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pre-placement&lt;/li&gt;
  &lt;li&gt;Global placement&lt;/li&gt;
  &lt;li&gt;High Fanout Net (HFN) synthesis&lt;/li&gt;
  &lt;li&gt;Scan Chain Reordering&lt;/li&gt;
  &lt;li&gt;Detail Placement&lt;/li&gt;
  &lt;li&gt;Timing Optimization&lt;/li&gt;
  &lt;li&gt;Leakage/Area Recovery&lt;/li&gt;
  &lt;li&gt;Legalization&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;clock-tree-synthesis&quot;&gt;Clock Tree Synthesis&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#clock-tree-synthesis&quot; target=&quot;_blank&quot;&gt;Clock Tree Synthesis&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Minimize skew, latency and insertion delay for clock signals reaching all the sequential elements in the design.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Clock is an important component in digital design as sequential circuits such as flipflops and registers require clock signal to function properly. Clock to a chip is generally provided by external circuitry (off-chip) consisting of crystal oscillator which is limited to generate frequencies around 100 MHz. This input frequency to the chip is multiplied to higher frequency ranges (say 1 GHz) using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Phase-locked_loop&quot; target=&quot;_blank&quot;&gt;phase locked loop (PLL)&lt;/a&gt; sitting inside the chip.&lt;/p&gt;

&lt;p&gt;So, to deliver on-chip PLL generated clock to all the sequential elements scattered around the chip, we need some kind of planning to meet timing, power and area which takes us into a separate world called Clock Tree Synthesis (CTS).&lt;/p&gt;

&lt;p&gt;After placement and before CTS, the clock is considered as &lt;span class=&quot;coding&quot;&gt;ideal&lt;/span&gt; i.e. right from the source it travels to all the clock pins (sinks) without any delay. But after CTS, the clock is &lt;span class=&quot;coding&quot;&gt;propagated&lt;/span&gt; which means there is considerable amount of delay involved between the clock signal entering one flipflop and another flipflop in the design which is defined as &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_skew&quot; target=&quot;_blank&quot;&gt;clock skew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of CTS is to reduce this clock skew, balance it and minimize insertion delay (propagation delay from clock source to sink) between millions of sequential elements. This is done with the help of constructing a clock tree using special cells such as &lt;em&gt;clock tree inverters&lt;/em&gt; to maintain exact duty cycle (transition) and &lt;em&gt;clock tree buffers&lt;/em&gt; to balance the skew and latency involved.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At fast speeds or long distances, because of &lt;strong&gt;clock skew&lt;/strong&gt; serial interfaces (ex: USB) are preferred over parallel interfaces (ex: parallel SCSI).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;
    &lt;img src=&quot;https://drive.google.com/uc?id=1JjAhv0sz5kLsxhvrqA--QxHbMARUiFWa&quot; /&gt;
    &lt;figcaption&gt;Figure 8. Clock Tree Synthesis&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Additionally, these clock tree inverters and buffers should be added carefully with area and power constraints in mind. Commonly used clock trees are &lt;em&gt;H-Tree, Fishbone Tree and Star Tree&lt;/em&gt; as shown above.&lt;/p&gt;

&lt;p&gt;Main steps to be taken care during CTS are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Target minimum possible clock skew.&lt;/li&gt;
  &lt;li&gt;Target minimum possible latency.&lt;/li&gt;
  &lt;li&gt;Max Fanout, max transition and max capacitance limits must be met.&lt;/li&gt;
  &lt;li&gt;Apply Non-Default Routing (NDR) rules for clock nets to reduce crosstalk and noise (signal integrity).&lt;/li&gt;
  &lt;li&gt;Pre-route clock nets in higher metal layers as it offers less resistance.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#routing&quot; target=&quot;_blank&quot;&gt;Routing&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Physically connect all the interconnects (nets) in the design with physical constraints such as DRC, wire length, timing, noise and crosstalk to be taken care.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;After placing all the standard cells in the design, interconnects (nets) must be routed physically using the metal layer stack with wires and vias. Routing is typically done in two steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Global Routing&lt;/strong&gt; - Generate a rough route (routing region, track assignment) for each net in the design without specifying the actual layout of wires (loosely routed).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Detail Routing&lt;/strong&gt; - Generate actual geometry layout for each net in the design using different metal layers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each metal layer in the metal layer stack of your design has &lt;em&gt;preferred routing direction&lt;/em&gt; as well as &lt;em&gt;non-preferred routing direction&lt;/em&gt;. For example, &lt;span class=&quot;coding&quot;&gt;M2&lt;/span&gt; metal layer might have preferred routing direction as &lt;em&gt;horizontal&lt;/em&gt; and non-preferred routing direction as &lt;em&gt;vertical&lt;/em&gt;. This constraint is based on the technology node rule.&lt;/p&gt;

&lt;p&gt;Main steps to be taken care during routing are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Wire length must be minimized and so, buffering is done for all nets greater than a threshold (normally 200 to 300um).&lt;/li&gt;
  &lt;li&gt;Congestion hotspots must be reduced.&lt;/li&gt;
  &lt;li&gt;Noise &amp;amp; Crosstalk must be reduced using shielding and/or NDR techniques.&lt;/li&gt;
  &lt;li&gt;DRC rules (geometry rules) must be honored during detail routing.&lt;/li&gt;
  &lt;li&gt;Shorts must be very minimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;static-timing-analysis&quot;&gt;Static Timing Analysis&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#static-timing-analysis&quot; target=&quot;_blank&quot;&gt;Static Timing Analysis&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design with respect to timing and verify whether the design could operate at the specified clock frequency without any timing violations such as setup, hold, recovery, removal, max transition and max capacitance across different &lt;a href=&quot;https://en.wikipedia.org/wiki/Process_corners&quot; target=&quot;_blank&quot;&gt;PVT corners&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Once the design is placed and routed, it is validated for timing. STA involves checking whether the design meets the &lt;em&gt;specified clock frequency&lt;/em&gt; and is free of &lt;em&gt;timing violations&lt;/em&gt; such as setup, hold, recovery, removal, maximum transition, maximum capacitance etc., across different &lt;em&gt;PVT corners&lt;/em&gt; or &lt;em&gt;operating conditions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;STA largely depends on &lt;a href=&quot;https://en.wikipedia.org/wiki/Parasitic_extraction&quot; target=&quot;_blank&quot;&gt;parasitic extraction&lt;/a&gt; which is a process of extracting the R (resistance) and C (capacitance) of the interconnect metal traces in the design which are obtained only after detail routing. These RC parasitics causes propagation delay that is further added by the gate delay, resulting in timing degradation.&lt;/p&gt;

&lt;p&gt;You can read more about Static Timing Analysis in the below links.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/sta-timing-paths-and-delays&quot; target=&quot;_blank&quot;&gt;STA Timing Paths and Delays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/cmos-basics-for-sta-2&quot; target=&quot;_blank&quot;&gt;STA CMOS Basics (Part 2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/cmos-basics-for-sta-1&quot; target=&quot;_blank&quot;&gt;STA CMOS Basics (Part 1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/mosfet-fundamentals&quot; target=&quot;_blank&quot;&gt;STA MOSFET fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;power-verification&quot;&gt;Power Verification&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#power-verification&quot; target=&quot;_blank&quot;&gt;Power Verification&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design with respect to power and verify whether the design meets static and dynamic IR drop thresholds, and is free from electromagnetic effects.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Similar to timing validation, power analysis and debugging is done to ensure that the design is free from power related issues such as static IR drop, dynamic IR drop and electromagnetic issues.&lt;/p&gt;

&lt;p&gt;Only if the design meets power numbers specified in the design specifications, it can last longer. Hence, power is a primary concern for chip designers due to decreasing technology node and increasing metal layer stack.&lt;/p&gt;

&lt;p&gt;You can read more about low power design in the below links.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/power-distribution-network-in-asic-physical-design&quot; target=&quot;_blank&quot;&gt;Power Distribution Network in ASIC Physical Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/power-reduction-techniques-in-asic-design&quot; target=&quot;_blank&quot;&gt;Power Reduction Techniques in ASIC Design&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;physical-verification&quot;&gt;Physical Verification&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;Related Terminologies: [&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design-terminologies#physical-verification&quot; target=&quot;_blank&quot;&gt;Physical Verification&lt;/a&gt;]&lt;/i&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
  &lt;p&gt;&lt;b&gt;Goal:&lt;/b&gt; Validate the design layout with respect to physical geometries and technology rules for electrical correctness, logical correctness and manufacturability, and make sure the design passes DRC, LVS, ERC, Antenna check and XOR check.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This is the final signoff check that is done for your design before you tape-out your design for fabrication. Design must have zero shorts, zero opens, zero design rule violation, zero antenna violation, zero base violation and must be logically equivalent as the synthesized logic netlist.&lt;/p&gt;

&lt;p&gt;You can read more about physical verification checks &lt;a href=&quot;https://en.wikipedia.org/wiki/Physical_verification&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aspdac.com/aspdac2014/technical_program/pdf/6B-3.pdf&quot; target=&quot;_blank&quot;&gt;Routability-Driven Bump Assignment for Chip-Package Co-Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLZU5hLL_713x0_AV_rVbay0pWmED7992G&quot; target=&quot;_blank&quot;&gt;Digital VLSI Design - Dr.Adam Teman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=z4zKJLfYZT0&quot; target=&quot;_blank&quot;&gt;Physical Design Training Overview (Demo Session) [Trainer #1]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=_PQdoBXJPhk&quot; target=&quot;_blank&quot;&gt;VLSI Training &amp;amp; Physical Design Training Overview [Trainer #2]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Y2PQzc9Gqsw&quot; target=&quot;_blank&quot;&gt;ASIC design flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLCmoXVuSEVHlEJi3SwdyJ4EICffuyqpjk&quot; target=&quot;_blank&quot;&gt;VLSI Physical Design NPTEL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogul09.github.io/hardware/physical-design&quot; target=&quot;_blank&quot;&gt;Physical Design Resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42525558&quot; target=&quot;_blank&quot;&gt;Cadence User Conference: Flexible H-Tree!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.techarena.it/trinity-adottera-le-maglie-di-distribuzione-in-luogo-dei-clock-tree-16715&quot; target=&quot;_blank&quot;&gt;Trinity will adopt the distribution links instead of clock-trees&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gogul Ilango</name></author><category term="hardware" /><summary type="html">X Contents What is VLSI Physical Design? Why VLSI Physical Design Flow? VLSI Physical Design Flow Importing Inputs Floorplanning &amp;amp; Partitioning Power Planning Placement Clock Tree Synthesis Routing Static Timing Analysis Power Verification Physical Verification References When I was a kid, I used to spend time with playstation and computers. At that time, I always wondered how those tiny components inside rectangular black boxes entertain me by making me play cool games and watch movies. When I grew up, I realized its the combination of logic design and physical design that makes an Integrated Circuit that is sitting inside the device you currently hold in your hand. In this blog post, we will learn the basics of VLSI physical design or VLSI backend design that is used to create modern Integrated Circuits (ICs) that power up numerous electronic applications such as desktop, laptop, tablet, smartphone etc. Logic Design (Frontend) vs Physical Design (Backend) What is VLSI Physical Design? The final output of a frontend design or circuit design or logic design is a netlist. Netlist is a text file (ending with .v or .vhdl) that contains the logical functionality of your chip. This netlist could be viewed as a plethora of instances (standard cells, macros, io pads etc.,) with interconnections (nets) between them based on the functionality you wish to implement. Typically, there are two types of netlist when designing a chip. RTL netlist Gate-level netlist RTL netlist is the high-level abstraction of the design using which logic design engineers write code in .v or .vhdl. This netlist is created with logic functionality of the design as its primary goal. Gate-level netlist is the output of a design stage called logic synthesis which takes in RTL netlist, design constraints and technology files, and generates a netlist that has standard cells and interconnections (nets) between them. Figure 1. Logic Synthesis - RTL netlist to Gate-level netlist This connectivity information in a gate-level netlist is a layer of abstraction of your hardware which must be converted to a physically realizable format (having geometric shapes) that is manufacturable. The process of converting a gate-level netlist into a physically realizable format (GDSII) which finally becomes the hardware (chip) is called Physical Design. Figure 2. Circuit to Layout Actually, Physical Design contains a lot more steps to be done than the above simplified definition. Figure 2 shows the conversion of a simple transistor level circuit to a physically realizable layout. It would be a dream come true for any hardware engineer if there is a tool that takes in a gate-level netlist and constructs a physical layout that is optimized for performance, power and area at lower technology nodes! The GDSII layout format is a binary file format that represents your IC layout using geometric shapes, text labels and additional foundry specific information in a hierarchical form. You will understand what this means by looking at the video below which shows a GDSII layout file in 3D (created by IC Design Group at University of Twente). In VLSI, Physical Design is the only domain where you can see circuits in a Graphical User Interface (GUI) with geometric shapes and colors as shown in Figure 3. It is an excellent career choice for engineering minds with an artistic background because you will be drawing layout specific geometries either manually or using code! Figure 3. A typical chip when looked from a physical design perspective By this time, you might be overwhelmed by the complexity of the layout artwork (which finally becomes your hardware IC) that you have just seen in the above video and image. But, don’t worry. This is where automation becomes your friend! Physical Design involves dedicated automation flows and methodologies for each and every step in the design process with the help of Electronic Design Automation (EDA) tools and scripts written in languages such as Tcl, Perl or Python. A design will never function as expected if it is not verified and validated 100% before manufacturing. Hence, Physical Design involves robust verification flows (or the so-called signoff flows) to verify and validate the design in terms of timing, power, area and functionality. Why VLSI Physical Design Flow? Physical design is all about placing instances defined in the netlist and connecting them by routing through metal layer stack to satisfy design specifications such as performance, power and area (PPA). Current IC designs have multi-million instances that are interconnected with several stack of metal layers that connect these instances. Manually performing each step in the design process is not feasible, takes huge amount of time and is error prone. The complexity in designing a multi-million instance based IC is huge and hence we need dedicated automation flows that complete specific tasks needed to be performed at each step in the design which reduces design time and errors. These flows require knowledge and understanding of EDA tools and scripting languages such as Tcl, Perl or Python. In addition to complexity, as time to market for chips is decreasing, reuse of IP (Intellectual Property) blocks is highly preferred in each design. VLSI Physical Design Flow Typical VLSI Physical Design (PD) flow is shown in Figure 4. This is a standard flow that is followed in modern IC design. Each step in the PD flow has sub flows or further steps that are needed to be performed. Figure 4. VLSI Physical Design Flow Major steps involved in Physical Design are Importing Inputs Floorplanning &amp;amp; Partitioning Power Planning Placement Clock Tree Synthesis (CTS) Routing Major verification (signoff) steps involved in Physical Design are Static Timing Analysis (STA) Power Distribution Network Analysis (PDN) Physical Verification (PV) Formal Verification (FV) Conformal Low Power Verification (CLP) Commonly used EDA tools for Floorplanning, Place and Route are Cadence Innovus Cadence First Encounter Synopsys IC Compiler II Commonly used EDA tools for signoff checks are Synopsys StarRC for Parasitic Extraction Synopsys PrimeTime for Static Timing Analysis Apache RedHawk for Power Analysis and Debugging Mentor Graphics Calibre for Physical Verification Cadence Logic Equivalence Checker for Formal Verification Cadence Conformal Low Power for Conformal Low Power Verification Importing Inputs Goal: Gather all the required inputs for physical design such as gate level netlist .v / .vhdl, Technology file .tech, UPF (Unified Power Format) files .upf, Library files that include LIBs .lib, LEFs .lef, DEFs .def and GDS .gds of standard cells and IPs and SDC (Synopsys Design Constraint) files .sdc. Inputs to physical design are the most important files that you will need to start your design process. If the inputs are read in the EDA tools without any issues (warnings and errors), then your physical design flow goes smooth. Commonly required inputs to start physical design for an IC are Gate-level Netlist .v or .vhdl (given by synthesis people) Technology file .tech (given by fabrication people) Logical libraries .lib (given by vendors) Physical libraries .lef .def .gds (given by vendors) UPF (Unified Power Format) files .upf (given by UPF people) SDC (Synopsys Design Constraints) files .sdc (given by synthesis people) Floorplanning &amp;amp; Partitioning Related Terminologies: [Floorplanning] Goal: Calculate the die size, create IO ring, partition the design and calculate the size, shape and placement of partitions (HMs or blocks), figure out the position of custom macros such as analog macros and create PG grid. In today’s IC design, because of huge design complexity, hierarchical design approach is followed. What this means is, the entire chip is divided into partitions or blocks that are interconnected at a TOP_LEVEL module. Figure 5 shows a typical TOP_LEVEL floorplan module of an IC with abutted blocks, non-abutted blocks and routing channels. Figure 5. A typical view of top-level floorplan of an IC This TOP_LEVEL module of your chip contains hard blocks and soft blocks with or without glue logic (standard cells in TOP_LEVEL). Hard blocks are those sub-blocks whose shapes cannot be changed. These blocks are mostly IPs or macros that are already designed and validated for that particular technology node. Placement of these blocks are decided based on design understanding and package requirements in TOP_LEVEL. Soft blocks are those blocks whose shapes can be changed to meet predefined cost metrics such as chip area, wirelength and wire congestion. These are the blocks that are needed to be designed and validated for chip-level convergence. In industry terms, these soft blocks are called as Hard Macros or HMs. During floorplanning, one must ensure proper shapes for the Hard Macros (HMs) until convergence is reached in terms of cost metrics, timing, power and area. Due to design complexity and runtime of EDA tools, each Hard Macro (HM) or block is created using the same design steps such as floorplanning, placement and routing and then integrated at the TOP_LEVEL module. Dividing the entire design into smaller sub-designs (partitions) makes design convergence easier. This is because, the runtime of EDA tools for a single partition (block) will take lesser time for each step in the PD flow when compared to entire design. Physical Design is all about tradeoffs between area, speed and power. Thus, floorplanning is a highly iterative process which takes into account the hard blocks and soft blocks used, memories, IO pads and their placement in the design, routing possibilities between different blocks and inside the blocks, power grid structure for each macro and cell in the design, and also the aspect ratio and IO structure of the entire design. Power Planning Related Terminologies: [Power Distribution] Goal: Decide on power dissipation number and construct power distribution network accordingly to power up blocks, IO pads, macros and standard cells. VDD and VSS that you see in the transistor level circuit in Figure 2 needs to be supplied to every transistor in a multi-million transistor design. Thus, power from a single battery source must be delivered to each cell in the design. To accomplish this, power planning is done. During floorplanning, power planning is a step that is done to construct the power distribution network to supply power to all blocks, macros and standard cells equally. Figure 6. Power Planning (or Power Distribution) in an IC As shown in Figure 6, there are two types of power distribution strategies followed in chip design namely Wire Bonding and Flip-Chip (read more). Using any one of these two power distribution strategies, we usually form power rings, stripes and rails through out the design. Rings - Supplies VDD and VSS around the chip. Stripes - Supplies VDD and VSS across/throughout the chip. Rails - Supplies VDD and VSS to the standard cells in the design. Main steps to be taken care during power planning are Decision on width, pitch and offset of power stripes for each metal layer. Block power hook up at TOP_LEVEL. IO power hook up at TOP_LEVEL. Standard cells power hook up inside block as well as TOP_LEVEL. Shorts and Opens are to be checked and fixed. Placement Related Terminologies: [Placement] Goal: Place all the standard cells in the design to minimize total area, reduce interconnect cost, reduce congestion hotspots and improve timing. After floorplanning the design, for each block, standard cells are placed inside the block. These standard cells are the functional cells that contain the necessary logic functionality for your chip that are provided to you by the foundry. Inside the standard cells, you could find the individual transistors that make up the logic functionality. Ex: AND gate, OR gate, 2x1 multiplexer etc. If you think of a chip as the house, then placement is the process of placing each individual brick (standard cell) that make up the house. In a multi-million instances design, placing these cells manually is not feasible. Hence, EDA tool place these cells in the standard cell rows (created during floorplanning) with conflicting goals of optimizing congestion, timing and power. Placement is carried out with the help of virtual route. Figure 7. Placement Virtual route is a rough estimate for the EDA tool to measure the shortest manhattan distance from one standard cell pin to another. Based on this distance, timing is calculated roughly and these cells are placed accordingly. A good placement reduces the delay of interconnect wires, has shorter interconnect wire length and has lesser congestion hotspots. One key thing performed during placement is legalization which means placing standard cells at appropriate locations without any placement constraint violation or design rule violation. Placement greatly determines the routability of the design. Standard placement flow involves the following steps. Pre-placement Global placement High Fanout Net (HFN) synthesis Scan Chain Reordering Detail Placement Timing Optimization Leakage/Area Recovery Legalization Clock Tree Synthesis Related Terminologies: [Clock Tree Synthesis] Goal: Minimize skew, latency and insertion delay for clock signals reaching all the sequential elements in the design. Clock is an important component in digital design as sequential circuits such as flipflops and registers require clock signal to function properly. Clock to a chip is generally provided by external circuitry (off-chip) consisting of crystal oscillator which is limited to generate frequencies around 100 MHz. This input frequency to the chip is multiplied to higher frequency ranges (say 1 GHz) using a phase locked loop (PLL) sitting inside the chip. So, to deliver on-chip PLL generated clock to all the sequential elements scattered around the chip, we need some kind of planning to meet timing, power and area which takes us into a separate world called Clock Tree Synthesis (CTS). After placement and before CTS, the clock is considered as ideal i.e. right from the source it travels to all the clock pins (sinks) without any delay. But after CTS, the clock is propagated which means there is considerable amount of delay involved between the clock signal entering one flipflop and another flipflop in the design which is defined as clock skew. The goal of CTS is to reduce this clock skew, balance it and minimize insertion delay (propagation delay from clock source to sink) between millions of sequential elements. This is done with the help of constructing a clock tree using special cells such as clock tree inverters to maintain exact duty cycle (transition) and clock tree buffers to balance the skew and latency involved. At fast speeds or long distances, because of clock skew serial interfaces (ex: USB) are preferred over parallel interfaces (ex: parallel SCSI). Figure 8. Clock Tree Synthesis Additionally, these clock tree inverters and buffers should be added carefully with area and power constraints in mind. Commonly used clock trees are H-Tree, Fishbone Tree and Star Tree as shown above. Main steps to be taken care during CTS are Target minimum possible clock skew. Target minimum possible latency. Max Fanout, max transition and max capacitance limits must be met. Apply Non-Default Routing (NDR) rules for clock nets to reduce crosstalk and noise (signal integrity). Pre-route clock nets in higher metal layers as it offers less resistance. Routing Related Terminologies: [Routing] Goal: Physically connect all the interconnects (nets) in the design with physical constraints such as DRC, wire length, timing, noise and crosstalk to be taken care. After placing all the standard cells in the design, interconnects (nets) must be routed physically using the metal layer stack with wires and vias. Routing is typically done in two steps. Global Routing - Generate a rough route (routing region, track assignment) for each net in the design without specifying the actual layout of wires (loosely routed). Detail Routing - Generate actual geometry layout for each net in the design using different metal layers. Each metal layer in the metal layer stack of your design has preferred routing direction as well as non-preferred routing direction. For example, M2 metal layer might have preferred routing direction as horizontal and non-preferred routing direction as vertical. This constraint is based on the technology node rule. Main steps to be taken care during routing are Wire length must be minimized and so, buffering is done for all nets greater than a threshold (normally 200 to 300um). Congestion hotspots must be reduced. Noise &amp;amp; Crosstalk must be reduced using shielding and/or NDR techniques. DRC rules (geometry rules) must be honored during detail routing. Shorts must be very minimal. Static Timing Analysis Related Terminologies: [Static Timing Analysis] Goal: Validate the design with respect to timing and verify whether the design could operate at the specified clock frequency without any timing violations such as setup, hold, recovery, removal, max transition and max capacitance across different PVT corners. Once the design is placed and routed, it is validated for timing. STA involves checking whether the design meets the specified clock frequency and is free of timing violations such as setup, hold, recovery, removal, maximum transition, maximum capacitance etc., across different PVT corners or operating conditions. STA largely depends on parasitic extraction which is a process of extracting the R (resistance) and C (capacitance) of the interconnect metal traces in the design which are obtained only after detail routing. These RC parasitics causes propagation delay that is further added by the gate delay, resulting in timing degradation. You can read more about Static Timing Analysis in the below links. STA Timing Paths and Delays STA CMOS Basics (Part 2) STA CMOS Basics (Part 1) STA MOSFET fundamentals Power Verification Related Terminologies: [Power Verification] Goal: Validate the design with respect to power and verify whether the design meets static and dynamic IR drop thresholds, and is free from electromagnetic effects. Similar to timing validation, power analysis and debugging is done to ensure that the design is free from power related issues such as static IR drop, dynamic IR drop and electromagnetic issues. Only if the design meets power numbers specified in the design specifications, it can last longer. Hence, power is a primary concern for chip designers due to decreasing technology node and increasing metal layer stack. You can read more about low power design in the below links. Power Distribution Network in ASIC Physical Design Power Reduction Techniques in ASIC Design. Physical Verification Related Terminologies: [Physical Verification] Goal: Validate the design layout with respect to physical geometries and technology rules for electrical correctness, logical correctness and manufacturability, and make sure the design passes DRC, LVS, ERC, Antenna check and XOR check. This is the final signoff check that is done for your design before you tape-out your design for fabrication. Design must have zero shorts, zero opens, zero design rule violation, zero antenna violation, zero base violation and must be logically equivalent as the synthesized logic netlist. You can read more about physical verification checks here. References Routability-Driven Bump Assignment for Chip-Package Co-Design Digital VLSI Design - Dr.Adam Teman Physical Design Training Overview (Demo Session) [Trainer #1] VLSI Training &amp;amp; Physical Design Training Overview [Trainer #2] ASIC design flow VLSI Physical Design NPTEL Physical Design Resources Cadence User Conference: Flexible H-Tree! Trinity will adopt the distribution links instead of clock-trees</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1amQI_tQSrnTqYAXhraVpNc1NpJVgPNTE" /></entry><entry><title type="html">Creating Intelligent Music Applications in the Browser</title><link href="http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser" rel="alternate" type="text/html" title="Creating Intelligent Music Applications in the Browser" /><published>2018-12-24T00:00:00+05:30</published><updated>2018-12-24T00:00:00+05:30</updated><id>http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser</id><content type="html" xml:base="http://localhost:4000/software/creating-intelligent-music-applications-in-the-browser">&lt;div class=&quot;git-showcase&quot;&gt;
  &lt;div&gt;
    &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09&quot; data-show-count=&quot;true&quot; aria-label=&quot;Follow @Gogul09 on GitHub&quot;&gt;Follow @Gogul09&lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;
	&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09/deep-drum/fork&quot; data-icon=&quot;octicon-repo-forked&quot; data-show-count=&quot;true&quot; aria-label=&quot;Fork Gogul09/deep-drum on GitHub&quot;&gt;Fork&lt;/a&gt;
  &lt;/div&gt;

  &lt;div&gt;
	&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/Gogul09/deep-drum&quot; data-icon=&quot;octicon-star&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star Gogul09/deep-drum on GitHub&quot;&gt;Star&lt;/a&gt;
  &lt;/div&gt;  
&lt;/div&gt;

&lt;div class=&quot;sidebar_tracker&quot; id=&quot;sidebar_tracker&quot;&gt;
  &lt;button onclick=&quot;closeSidebar('sidebar_tracker_content')&quot;&gt;X&lt;/button&gt;
  &lt;p onclick=&quot;showSidebar('sidebar_tracker_content')&quot;&gt;Contents&lt;/p&gt;
  &lt;ul id=&quot;sidebar_tracker_content&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_1&quot; href=&quot;#why-music-and-ml&quot;&gt;Why Music and ML?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_2&quot; href=&quot;#why-browser-for-ml&quot;&gt;Why browser for ML?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_3&quot; href=&quot;#using-magentas-pre-trained-models&quot;&gt;Using Magenta's Pre-trained Models&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_4&quot; href=&quot;#generating-drum-patterns-using-drumsrnn&quot;&gt;Generating Drum Patterns using DrumsRNN&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_5&quot; href=&quot;#cool-demos&quot;&gt;Cool Demos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;sidebar_links&quot; onclick=&quot;handleSideBarLinks(this.id)&quot; id=&quot;link_6&quot; href=&quot;#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;After the introduction of Google’s &lt;a href=&quot;https://js.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;TensorFlow.js&lt;/a&gt;, it has become a lot easier to make use of browser (client-side) to do Deep learning. There are handy approaches (as discussed &lt;a href=&quot;https://js.tensorflow.org/tutorials/import-keras.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;) on deploying deep learning models using &lt;a href=&quot;https://keras.io/&quot; target=&quot;_blank&quot;&gt;Keras&lt;/a&gt; and TensorFlow.js.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
	&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: To learn more about TensorFlow.js and its applications, kindly visit this &lt;a href=&quot;https://github.com/tensorflow/tfjs/blob/master/GALLERY.md&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;why-music-and-ml&quot;&gt;Why Music and ML?&lt;/h3&gt;

&lt;p&gt;Music generation has already began to catch the eyes of machine learning devs and there are numerous projects that are getting pushed in &lt;a href=&quot;https://github.com/search?q=music+generation&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; every week. Although there exist a barrier between AI Researchers and AI Developers such as complex mathematics that involve derivations and jargons, there is still hope for an AI enthusiast to use code and some music knowledge to create exciting applications that was a dream few years back.&lt;/p&gt;

&lt;p&gt;Leveraging the capabilities of TensorFlow.js, we now have Google’s &lt;a href=&quot;https://magenta.tensorflow.org/&quot; target=&quot;_blank&quot;&gt;Magenta.js&lt;/a&gt; using which any developer with knowledge on javascript and music could create a music application that has intelligence built in to it.&lt;/p&gt;

&lt;p&gt;I loved the concept behind &lt;a href=&quot;https://ai.google/research/teams/brain/magenta/&quot; target=&quot;_blank&quot;&gt;Google’s Magenta team&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a painter creates a work of art, she first blends and explores color options on an artist’s palette before applying them to the canvas. This process is a creative act in its own right and has a profound effect on the final work. Musicians and composers have mostly lacked a similar device for exploring and mixing musical ideas, but we are hoping to change that - &lt;a href=&quot;https://magenta.tensorflow.org/music-vae&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-browser-for-ml&quot;&gt;Why browser for ML?&lt;/h3&gt;

&lt;p&gt;Although one might feel that browsers are light-weight apps that wont handle data intensive algorithms such as deep neural networks, by leveraging the capabilities of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot; target=&quot;_blank&quot;&gt;WebGL&lt;/a&gt; in browsers such as Google Chrome, we could create, train and deploy deep neural net models right in the browser itself without any server requests.&lt;/p&gt;

&lt;p&gt;Another advantage of using browser to create AI applications is that you could easily send your creations to your friends or family using nothing more than a simple link!&lt;/p&gt;

&lt;h3 id=&quot;using-magentas-pre-trained-models&quot;&gt;Using Magenta's Pre-trained Models&lt;/h3&gt;

&lt;p&gt;Magenta.js is a javascript library that is built on top of TensorFlow.js which provides music oriented abstraction for developers. Google’s Magenta Team research, create and train deep learning models such as Long-Short Term Memory nets (LSTMs), Variational Auto-Encoders (VAE) etc., for music generation, and serve those models as pre-trained models for an AI enthusiast like me to use it for free.&lt;/p&gt;

&lt;p&gt;By using a pre-trained magenta model, we could build creative music applications in the browser using deep learning. Some of the note-based music models that are provided by Magenta are MusicVAE, MelodyRNN, DrumsRNN and ImprovRNN. Using these pretrained models, we could use their &lt;a href=&quot;https://github.com/tensorflow/magenta-js/&quot; target=&quot;_blank&quot;&gt;magenta.js&lt;/a&gt; API to create cool music apps.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: The prerequisites for making an application using Magenta.js include knowledge on HTML, CSS and JavaScript.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;generating-drum-patterns-using-drumsrnn&quot;&gt;Generating Drum Patterns using DrumsRNN&lt;/h3&gt;

&lt;p&gt;In this tutorial, I will show you how to create an intelligent music application that I call &lt;a href=&quot;https://gogul09.github.io/software/deep-drum&quot; target=&quot;_blank&quot;&gt;DeepDrum &amp;amp; DeepArp&lt;/a&gt; using javascript and Google’s magenta.js in the browser. First, we will focus on generating drum patterns using magenta’s &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/drums_rnn&quot; target=&quot;_blank&quot;&gt;drums_rnn&lt;/a&gt;. Similar approach is used to create arpeggio patterns using magenta’s &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/improv_rnn&quot; target=&quot;_blank&quot;&gt;improv_rnn&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://drive.google.com/uc?id=1f4GHFHGhE7htiJ4adyFr2wYScjfvIU1A&quot; /&gt;
	&lt;figcaption&gt;DeepDrum &amp;amp; DeepArp using Google Magenta's DrumsRnn &amp;amp; ImprovRNN&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The core algorithm behind these two models is the special type Recurrent Neural Network named Long-Short Term Memory network (LSTM). You can read more about the inner workings of an LSTM network in this excellent &lt;a href=&quot;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; by Christopher Olah.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: To include Magenta.js for your music application, you simply need to include the following script in your html &lt;strong&gt;head&lt;/strong&gt; tag.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;index.html&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/@magenta/music@1.4.2/dist/magentamusic.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: A pretrained magenta model can easily be loaded into a javascript environment using the &lt;a href=&quot;https://github.com/tensorflow/magenta-js/blob/master/music/checkpoints/README.md&quot; target=&quot;_blank&quot;&gt;js-checkpoints&lt;/a&gt; (that magenta team has made publicly available) which automatically loads the model along with config files in a single line of code.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MusicRNN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://storage.googleapis.com/download.magenta.tensorflow.org/tfjs_checkpoints/music_rnn/drum_kit_rnn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is a tradeoff between model package size and accuracy as inference of a pre-trained model is happening live in the browser (client-side).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Next, we need to initialize the model to make use of its methods and attributes.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Our drum pattern generator will work like this - You provide some random input seed pattern first and the deep neural network (DrumsRNN) will predict the next sequence of patterns.&lt;/p&gt;

&lt;p&gt;We have 10 individual drumkit instrument such as &lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;snare&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;hihat closed&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;hihat open&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom low&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom mid&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tom high&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;clap&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;ride&lt;/span&gt;. Hence, we define an array named &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to hold the &lt;strong&gt;ON&lt;/strong&gt; time step of each instrument (in an array) at every time step.&lt;/p&gt;

&lt;p&gt;For example, I have initialized the &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; as shown below. This means, for a &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt; of 4 time steps, we assign the input pattern like this -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt; should be &lt;strong&gt;ON&lt;/strong&gt; at first and third time step.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;snare&lt;/span&gt; shouldn’t be turned &lt;strong&gt;ON&lt;/strong&gt; within &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;hihat closed&lt;/span&gt; should be &lt;strong&gt;ON&lt;/strong&gt; only at third time step.&lt;/li&gt;
  &lt;li&gt;and so on..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice we start first time step as 0 in code.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;seed_limit&lt;/span&gt; defined, we could simply ask our &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to continue the sequence for us. Before doing that, we need to be aware of &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantization&quot; target=&quot;_blank&quot;&gt;quantization&lt;/a&gt; of the input values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: To quantize the note sequence, we feed the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; into a javascript object as shown below.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cur_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drum_to_note_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// drum to note sequence formation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drum_to_note_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pitch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;midiDrums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantizeNoteSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;ticksPerQuarter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;totalTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantize_tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;timeSignatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ts_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ts_den&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;tempos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;qpm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tempo&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes_array&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The way I figured out what’s inside &lt;span class=&quot;coding&quot;&gt;mm.sequences.quantizeNoteSequence&lt;/span&gt; is through the browser’s console and some help by looking at the code of few &lt;a href=&quot;https://magenta.tensorflow.org/demos&quot; target=&quot;_blank&quot;&gt;demos&lt;/a&gt; in Magenta’s website. Values like &lt;span class=&quot;coding&quot;&gt;timeSignatures&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;tempos&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;totalTime&lt;/span&gt; need to be set according to one’s preferences. You could even assign these values dynamically.&lt;/p&gt;

&lt;p&gt;The main thing you need to take care here is the conversion of our input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; into musical quantization format that Magenta accepts which includes defining each drumkit instrument’s &lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt;, &lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt; of a drumkit note is the MIDI value of that note which could be obtained from this &lt;a href=&quot;https://github.com/Gogul09/deep-drum/blob/master/js/reverse_midi_map.js&quot; target=&quot;_blank&quot;&gt;mapping&lt;/a&gt;. &lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; and &lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt; are quantization values that defines the start and end time for a single note.&lt;/p&gt;

&lt;p&gt;For example, for our first time step, &lt;span class=&quot;coding&quot;&gt;kick&lt;/span&gt; will have the following values.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;pitch&lt;/span&gt; - 36&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;startTime&lt;/span&gt; - 0&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;coding&quot;&gt;endTime&lt;/span&gt; - 0.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Once you have encoded the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to Magenta’s quantization format, you can ask &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to continue the sequence as shown below.&lt;/p&gt;

&lt;div class=&quot;code-head&quot;&gt;&lt;span&gt;code&lt;/span&gt;app.js&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature_drum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;predicted_sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drums_rnn&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;continueSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cur_seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temperature_drum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note_to_drum_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;player_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// note to drum sequence formation&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//---------------------------------&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;note_to_drum_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;empty_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;quantizedStartStep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantizedStartStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reverseMidiMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;First, we use &lt;span class=&quot;coding&quot;&gt;continueSequence()&lt;/span&gt; function of &lt;span class=&quot;coding&quot;&gt;drums_rnn&lt;/span&gt; to predict the next sequence values for all our drumkit instruments and store it in a variable named &lt;span class=&quot;coding&quot;&gt;predicted_sequence&lt;/span&gt;. These predictions will be based on the same old magenta’s quantization format having MIDI-mapped pitch values, start time and end time.&lt;/p&gt;

&lt;p&gt;We define an array named &lt;span class=&quot;coding&quot;&gt;res&lt;/span&gt; and store the predicted sequence values based on its &lt;span class=&quot;coding&quot;&gt;quantizedStartStep&lt;/span&gt;. We then concatenate the predicted sequence with the input &lt;span class=&quot;coding&quot;&gt;seed_pattern&lt;/span&gt; to generate a beat!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;These are the core steps involved in using Google Magenta’s pretrained model to generate sequences for music generation. You can use the same steps to generate arpeggio patterns using &lt;a href=&quot;https://github.com/tensorflow/magenta/tree/master/magenta/models/improv_rnn&quot; target=&quot;_blank&quot;&gt;improv_rnn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check the entire code that I have used to build this music application &lt;a href=&quot;https://github.com/Gogul09/deep-drum&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: If you still don't understand the steps mentioned here, I highly encourage you to do &lt;span class=&quot;coding&quot;&gt;console.log()&lt;/span&gt; at each step of the code and understand the steps completely.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cool-demos&quot;&gt;Cool Demos&lt;/h3&gt;

&lt;p&gt;People working in this domain are musicians, artists, creative coders, programmers and researchers who have built extremely amazing demos that you can find &lt;a href=&quot;https://magenta.tensorflow.org/demos&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://aijs.rocks/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://magenta.tensorflow.org/js-announce&quot; target=&quot;_blank&quot;&gt;Magenta.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tfjs/blob/master/GALLERY.md&quot; target=&quot;_blank&quot;&gt;TensorFlow.js Gallery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GJfjKdpmN6g&quot; target=&quot;_blank&quot;&gt;Music and AI in the Browser with TensorFlow js and Magenta js – Tero Parviainen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HKRJuz6o2uY&quot; target=&quot;_blank&quot;&gt;Musical Deep Neural Networks in the Browser by Tero Parviainen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FgoVL3A6RCo&quot; target=&quot;_blank&quot;&gt;AI JavaScript Rocks - Asim Hussain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gogul Ilango</name></author><category term="software" /><summary type="html">Follow @Gogul09 Fork Star X Contents Why Music and ML? Why browser for ML? Using Magenta's Pre-trained Models Generating Drum Patterns using DrumsRNN Cool Demos Resources After the introduction of Google’s TensorFlow.js, it has become a lot easier to make use of browser (client-side) to do Deep learning. There are handy approaches (as discussed here) on deploying deep learning models using Keras and TensorFlow.js. Note: To learn more about TensorFlow.js and its applications, kindly visit this link. Why Music and ML? Music generation has already began to catch the eyes of machine learning devs and there are numerous projects that are getting pushed in GitHub every week. Although there exist a barrier between AI Researchers and AI Developers such as complex mathematics that involve derivations and jargons, there is still hope for an AI enthusiast to use code and some music knowledge to create exciting applications that was a dream few years back. Leveraging the capabilities of TensorFlow.js, we now have Google’s Magenta.js using which any developer with knowledge on javascript and music could create a music application that has intelligence built in to it. I loved the concept behind Google’s Magenta team. When a painter creates a work of art, she first blends and explores color options on an artist’s palette before applying them to the canvas. This process is a creative act in its own right and has a profound effect on the final work. Musicians and composers have mostly lacked a similar device for exploring and mixing musical ideas, but we are hoping to change that - Read more Why browser for ML? Although one might feel that browsers are light-weight apps that wont handle data intensive algorithms such as deep neural networks, by leveraging the capabilities of WebGL in browsers such as Google Chrome, we could create, train and deploy deep neural net models right in the browser itself without any server requests. Another advantage of using browser to create AI applications is that you could easily send your creations to your friends or family using nothing more than a simple link! Using Magenta's Pre-trained Models Magenta.js is a javascript library that is built on top of TensorFlow.js which provides music oriented abstraction for developers. Google’s Magenta Team research, create and train deep learning models such as Long-Short Term Memory nets (LSTMs), Variational Auto-Encoders (VAE) etc., for music generation, and serve those models as pre-trained models for an AI enthusiast like me to use it for free. By using a pre-trained magenta model, we could build creative music applications in the browser using deep learning. Some of the note-based music models that are provided by Magenta are MusicVAE, MelodyRNN, DrumsRNN and ImprovRNN. Using these pretrained models, we could use their magenta.js API to create cool music apps. Note: The prerequisites for making an application using Magenta.js include knowledge on HTML, CSS and JavaScript. Generating Drum Patterns using DrumsRNN In this tutorial, I will show you how to create an intelligent music application that I call DeepDrum &amp;amp; DeepArp using javascript and Google’s magenta.js in the browser. First, we will focus on generating drum patterns using magenta’s drums_rnn. Similar approach is used to create arpeggio patterns using magenta’s improv_rnn. DeepDrum &amp;amp; DeepArp using Google Magenta's DrumsRnn &amp;amp; ImprovRNN The core algorithm behind these two models is the special type Recurrent Neural Network named Long-Short Term Memory network (LSTM). You can read more about the inner workings of an LSTM network in this excellent blog post by Christopher Olah. Step 1: To include Magenta.js for your music application, you simply need to include the following script in your html head tag. codeindex.html 1&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/@magenta/music@1.4.2/dist/magentamusic.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Step 2: A pretrained magenta model can easily be loaded into a javascript environment using the js-checkpoints (that magenta team has made publicly available) which automatically loads the model along with config files in a single line of code. codeapp.js 1let drums_rnn = mm.MusicRNN(&quot;https://storage.googleapis.com/download.magenta.tensorflow.org/tfjs_checkpoints/music_rnn/drum_kit_rnn&quot;); There is a tradeoff between model package size and accuracy as inference of a pre-trained model is happening live in the browser (client-side). Step 3: Next, we need to initialize the model to make use of its methods and attributes. codeapp.js 1drums_rnn.initialize(); Step 4: Our drum pattern generator will work like this - You provide some random input seed pattern first and the deep neural network (DrumsRNN) will predict the next sequence of patterns. We have 10 individual drumkit instrument such as kick, snare, hihat closed, hihat open, tom low, tom mid, tom high, clap and ride. Hence, we define an array named seed_pattern to hold the ON time step of each instrument (in an array) at every time step. For example, I have initialized the seed_pattern as shown below. This means, for a seed_limit of 4 time steps, we assign the input pattern like this - kick should be ON at first and third time step. snare shouldn’t be turned ON within seed_limit. hihat closed should be ON only at third time step. and so on.. Notice we start first time step as 0 in code. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12var seed_pattern = [ [0, 2], [], [2], [], [2], [], [0, 2], [], [1, 2], [] ]; With the input seed_pattern and seed_limit defined, we could simply ask our drums_rnn to continue the sequence for us. Before doing that, we need to be aware of quantization of the input values. Step 5: To quantize the note sequence, we feed the input seed_pattern into a javascript object as shown below. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43let cur_seq = drum_to_note_sequence(seed_pattern); //--------------------------------- // drum to note sequence formation //--------------------------------- function drum_to_note_sequence(quantize_tensor) { var notes_array = []; var note_index = 0; for (var i = 0; i &amp;lt; quantize_tensor.length; i++) { var notes = quantize_tensor[i]; if(notes.length &amp;gt; 0) { for (var j = 0; j &amp;lt; notes.length; j++) { notes_array[note_index] = {}; notes_array[note_index][&quot;pitch&quot;] = midiDrums[notes[j]]; notes_array[note_index][&quot;startTime&quot;] = i * 0.5; notes_array[note_index][&quot;endTime&quot;] = (i+1) * 0.5; note_index = note_index + 1; } } } return mm.sequences.quantizeNoteSequence( { ticksPerQuarter: 220, totalTime: quantize_tensor.length / 2, timeSignatures: [ { time: 0, numerator: ts_num, denominator: ts_den } ], tempos: [ { time: 0, qpm: tempo } ], notes: notes_array }, 1 ); } The way I figured out what’s inside mm.sequences.quantizeNoteSequence is through the browser’s console and some help by looking at the code of few demos in Magenta’s website. Values like timeSignatures, tempos and totalTime need to be set according to one’s preferences. You could even assign these values dynamically. The main thing you need to take care here is the conversion of our input seed_pattern into musical quantization format that Magenta accepts which includes defining each drumkit instrument’s pitch, startTime and endTime. pitch of a drumkit note is the MIDI value of that note which could be obtained from this mapping. startTime and endTime are quantization values that defines the start and end time for a single note. For example, for our first time step, kick will have the following values. pitch - 36 startTime - 0 endTime - 0.5 Step 6: Once you have encoded the input seed_pattern to Magenta’s quantization format, you can ask drums_rnn to continue the sequence as shown below. codeapp.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21const player_length = 32; const temperature_drum = 1; predicted_sequence = await drums_rnn .continueSequence(cur_seq, player_length, temperature_drum) .then(r =&amp;gt; seed_pattern.concat(note_to_drum_sequence(r, player_length))); //--------------------------------- // note to drum sequence formation //--------------------------------- function note_to_drum_sequence(seq, pLength) { let res = []; for (var i = 0; i &amp;lt; pLength; i++) { empty_list = []; res.push(empty_list); } for (let { pitch, quantizedStartStep } of seq.notes) { res[quantizedStartStep].push(reverseMidiMapping.get(pitch)); } return res; } First, we use continueSequence() function of drums_rnn to predict the next sequence values for all our drumkit instruments and store it in a variable named predicted_sequence. These predictions will be based on the same old magenta’s quantization format having MIDI-mapped pitch values, start time and end time. We define an array named res and store the predicted sequence values based on its quantizedStartStep. We then concatenate the predicted sequence with the input seed_pattern to generate a beat! These are the core steps involved in using Google Magenta’s pretrained model to generate sequences for music generation. You can use the same steps to generate arpeggio patterns using improv_rnn. You can check the entire code that I have used to build this music application here. Note: If you still don't understand the steps mentioned here, I highly encourage you to do console.log() at each step of the code and understand the steps completely. Cool Demos People working in this domain are musicians, artists, creative coders, programmers and researchers who have built extremely amazing demos that you can find here and here. Resources Magenta.js TensorFlow.js Gallery Music and AI in the Browser with TensorFlow js and Magenta js – Tero Parviainen Musical Deep Neural Networks in the Browser by Tero Parviainen AI JavaScript Rocks - Asim Hussain</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://drive.google.com/uc?id=1f4GHFHGhE7htiJ4adyFr2wYScjfvIU1A" /></entry></feed>